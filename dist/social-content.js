(()=>{function e(e,t){let n;return function(...a){clearTimeout(n),n=setTimeout((()=>{clearTimeout(n),e(...a)}),t)}}function t(e){try{const t=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),n=decodeURIComponent(atob(t).split("").map((e=>"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2))).join("")),a=JSON.parse(n);return console.log("Decoded JWT payload:",a),console.log("Extracted userId:",a.username),a}catch(e){return console.error("Error decoding JWT:",e),null}}let n,a,s=!1,o=!1,i=null;function r(){document.querySelectorAll(".image-overlay").forEach((e=>e.remove()))}async function l(){try{const e=await new Promise(((e,t)=>{chrome.storage.sync.get(["enableOverlay","facebook","twitter","instagram","linkedin","reddit"],(n=>{chrome.runtime.lastError?t(chrome.runtime.lastError):e(n)}))}));return s=!1!==e.enableOverlay,o=!1!==e[i],s&&o}catch(e){return console.error("Error in shouldProcessImage:",e),!1}}async function c(){if(!await l())return void r();const e=[];(function t(n){n.nodeType===Node.ELEMENT_NODE&&("img"!==n.tagName.toLowerCase()||n.dataset.overlayProcessed||e.push(n),n.shadowRoot&&t(n.shadowRoot),n.childNodes.forEach((e=>t(e))))})(document.body),"instagram"===i&&document.querySelectorAll('img[srcset], img[src*="instagram"]').forEach((t=>{t.dataset.overlayProcessed||e.push(t)})),"reddit"===i&&document.querySelectorAll('img[alt="Post image"]').forEach((t=>e.push(t))),e.forEach(((e,t)=>{if(e.width>50&&e.height>50||e.getAttribute("width")>50&&e.getAttribute("height")>50||e.classList.contains("media-lightbox-img"))try{e.complete&&e.naturalWidth>0?d(e,t):e.addEventListener("load",(()=>{d(e,t)}),{once:!0})}catch(e){console.error("Error processing image:",e)}else e.dataset.overlayProcessed="skipped"}))}function d(e,t){if("true"===e.dataset.overlayProcessed)return;const n=new IntersectionObserver((a=>{a.forEach((a=>{a.isIntersecting&&((e.width>100&&e.height>100||"video"===e.tagName.toLowerCase())&&u(e,t),n.unobserve(e))}))}),{threshold:.1});n.observe(e),e.dataset.overlayProcessed="true",e.onerror=function(){},e.onload=function(){(e.width>100&&e.height>100||"video"===e.tagName.toLowerCase())&&u(e,t)}}function u(n,a){const s=`overlay-${a}-${Date.now()}`;let o=document.querySelector(`.image-overlay[data-for-image="${n.src}"]`);if(!o){o=document.createElement("div"),o.className="image-overlay",o.dataset.forImage=n.src,o.dataset.overlayId=s;const a=document.createElement("img");a.src=chrome.runtime.getURL("icons/realeyes-ai-icon.png"),a.style.cssText=`\n        width: 20px;\n        height: 20px;\n        object-fit: contain;\n        ${"reddit"===i?"margin-top: 16px;":""}\n      `,o.style.cssText="\n            position: absolute;\n            width: 30px;\n            height: 30px;\n            background-color: rgba(255, 255, 255, 0.4);\n            border-radius: 50%;\n            cursor: pointer;\n            z-index: 2147483647;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 20px;\n            pointer-events: auto;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n            opacity: 0.5;\n            transition: opacity 0.3s ease, background-color 0.3s ease, display 0.3s ease;\n        ",o.appendChild(a),o.onclick=a=>{a.stopPropagation(),a.preventDefault();let r=document.querySelector(`.consent-popup[data-for-image="${n.src}"]`);if(r||(r=document.querySelector(`.consent-popup[data-overlay-id="${s}"]`)),r)return void r.remove();const l=function(e){if("instagram"===i){const t=document.createElement("canvas");t.width=e.naturalWidth,t.height=e.naturalHeight,t.getContext("2d").drawImage(e,0,0);try{return t.toDataURL("image/jpeg")}catch(t){return console.error("Failed to get image data:",t),e.src}}const t=e.src;let n=t;if("linkedin"===i){if(null!==e.closest(".feed-shared-celebration-image"))return t;try{const e=new URL(t),a=e.pathname;e.searchParams.delete("w"),e.searchParams.delete("h"),e.searchParams.set("w","1000"),e.searchParams.set("h","1000"),n=e.toString();const s=a.split(".").pop().toLowerCase();["jpg","jpeg","png","gif","webp"].includes(s)&&(n.toLowerCase().endsWith(`.${s}`)||(n+=`.${s}`))}catch(e){console.error("Failed to parse LinkedIn image URL:",e),n=t}}else if("instagram"===i&&t.includes("&_nc_ht="))try{const e=new URL(t);e.searchParams.delete("_nc_sid"),e.searchParams.delete("_nc_ohc"),e.searchParams.delete("_nc_ht"),e.searchParams.delete("edm"),e.searchParams.delete("oh"),e.searchParams.delete("oe"),n=e.toString()}catch(e){console.error("Failed to parse Instagram image URL:",e)}return n}(n);l?function(n,a,s){let o=document.querySelector(`.consent-popup[data-for-image="${a}"]`);if(o||(o=document.querySelector(`.consent-popup[data-overlay-id="${s}"]`)),o)return o;document.querySelectorAll(".consent-popup").forEach((e=>e.remove()));const i=document.createElement("div");i.className="consent-popup",i.setAttribute("data-for-image",a),i.setAttribute("data-overlay-id",s),i.innerHTML='\n        <p class="consent-message">Analyze this image?</p>\n        <div class="consent-buttons">\n            <button class="confirm-btn">Analyze Now</button>\n            <button class="cancel-btn">Skip</button>\n        </div>\n        <div class="consent-options">\n            <label class="store-data-option">\n                <input type="checkbox" class="store-data-checkbox" id="storeImageData" checked>\n                <span>Help us improve detection by storing this image</span>\n            </label>\n        </div>\n    ',document.body.appendChild(i);const r=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?(i.style.display="flex",l()):i.style.display="none"}))}),{threshold:.1});r.observe(n);const l=()=>{if("none"===i.style.display)return;const e=n.getBoundingClientRect(),t=window.scrollY||window.pageYOffset;let a=e.right+10,s=e.top+t;a+i.offsetWidth>window.innerWidth-10&&(a=e.left-i.offsetWidth-10);const o=document.documentElement.scrollHeight-i.offsetHeight-10;s=Math.max(10,Math.min(s,o)),i.style.position="absolute",i.style.left=`${a}px`,i.style.top=`${s}px`};new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting||(i.style.display="none")}))}),{threshold:0}).observe(n),setTimeout(l,0);const c=e(l,100);window.addEventListener("resize",c),window.addEventListener("scroll",c),i.querySelector(".confirm-btn")?.addEventListener("click",(async e=>{e.preventDefault();const n=i.querySelector("#storeImageData"),s=!!n&&n.checked;i.innerHTML='<div class="loading-indicator">Analyzing...</div>',await function(e,n,a){let s=e.split("/").pop().split("?")[0],o="image/jpeg";chrome.storage.local.get(["authToken"],(async function(i){const r=i.authToken;if(!r)return void m(n,"Authentication required. Please log in and try again.","error");const l=t(r),c=l?.username||null;if(e.includes("twimg.com")){const t=new URL(e).searchParams.get("format");t&&(s+=`.${t}`,o=`image/${t}`)}else o=function(e){return{jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",gif:"image/gif",webp:"image/webp"}[e.split(".").pop().toLowerCase()]||"application/octet-stream"}(s);fetch(e).then((e=>{if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return e.arrayBuffer()})).then((e=>{const t=new Uint8Array(e);return crypto.subtle.digest("SHA-256",t).then((e=>{const n=Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("");return{uint8Array:t,hashHex:n}}))})).then((({uint8Array:t,hashHex:i})=>{chrome.runtime.sendMessage({action:"sendImage",imageData:{url:e,mimeType:o,filename:s,size:t.length,sha256Hash:i,origin:window.location.origin,storeData:a,userId:c}},(e=>{chrome.runtime.lastError?m(n,"Error: "+chrome.runtime.lastError.message,"error"):"Authentication required"===e.error?m(n,"Authentication required. Please log in and try again.","error"):m(n,e,"success")}))})).catch((e=>{console.error("Error:",e),m(n,"Error: "+e.message,"error")}))}))}(a,i,s)})),i.querySelector(".cancel-btn")?.addEventListener("click",(()=>{window.removeEventListener("resize",c),window.removeEventListener("scroll",c),r.disconnect(),i.remove()}))}(o,l,s):function(){const e=document.createElement("div");e.textContent="No suitable image found.",e.style.position="fixed",e.style.bottom="20px",e.style.right="20px",e.style.padding="10px 20px",e.style.borderRadius="5px",e.style.color="#fff",e.style.zIndex="10000",e.style.boxShadow="0 2px 8px rgba(0, 0, 0, 0.2)",e.style.opacity="0",e.style.transition="opacity 0.5s ease-in-out",e.style.backgroundColor="#f44336",document.body.appendChild(e),e.offsetWidth,e.style.opacity="1",setTimeout((()=>{e.style.opacity="0",e.addEventListener("transitionend",(()=>{e.remove()}))}),3e3)}()},n.parentElement.appendChild(o),o.addEventListener("mouseenter",(()=>{o.style.opacity="1",o.style.backgroundColor="rgba(255, 255, 255, 0.8)"})),o.addEventListener("mouseleave",(()=>{o.style.opacity="0.5",o.style.backgroundColor="rgba(255, 255, 255, 0.4)"}))}const r=e((()=>{const e=n.getBoundingClientRect(),t=window.innerHeight,a=window.innerWidth,s=e.top<t&&e.bottom>0&&e.left<a&&e.right>0,i=null!==n.closest(".media-lightbox-img"),r="video"===n.tagName.toLowerCase()||n.querySelector("video");if(!s||!(e.width>100&&e.height>100||r)||i&&null===n.offsetParent)r?(o.style.display="flex",o.style.top="10px",o.style.right="10px",o.style.bottom="auto",o.style.left="auto"):setTimeout((()=>{s||(o.style.display="none")}),300);else{o.style.display="flex";const e=10,t=10;o.style.top=`${e}px`,o.style.right=`${t}px`,o.style.bottom="auto",o.style.left="auto"}}),100);if(r(),!n.dataset.overlayEventListenersAdded){const e=()=>{r()},t=()=>{r()};window.addEventListener("scroll",e,{passive:!0}),window.addEventListener("resize",t,{passive:!0}),n.dataset.overlayEventListenersAdded="true"}new MutationObserver((e=>{e.forEach((e=>{"attributes"!==e.type||"src"!==e.attributeName&&"style"!==e.attributeName||(o.dataset.forImage=n.src,r())}))})).observe(n,{attributes:!0,attributeFilter:["src","style"]})}function m(e,n,a){const s=e.getAttribute("data-overlay-id");if(e.innerHTML="","error"===a)e.innerHTML=`\n            <div class="error-container">\n                <div class="close-x">×</div>\n                <p class="error">${n}</p>\n            </div>\n        `;else{const a=n.sageMakerAnalysis,s=n.sageMakerAnalysisUFD,o=a.probability>s.probability?a:s;if(a.probability,s.probability,o){const i=(100*o.probability).toFixed(1);let r,l;i<33?(r="#28a745",l="This content is likely real."):i<66?(r="#ffc107",l="This content is uncertain—proceed with caution."):(r="#dc3545",l="This content is likely a deepfake."),e.innerHTML=`\n                <div class="close-x">×</div>\n                <div class="analysis-title" style="color: ${r}">${l}</div>\n\n                <div class="probability-circle">\n                    <svg width="150" height="150" viewBox="0 0 150 150">\n                        <circle\n                            cx="75"\n                            cy="75"\n                            r="70"\n                            stroke="#E6E6E6"\n                            stroke-width="10"\n                            fill="none"\n                        />\n                        <circle\n                            cx="75"\n                            cy="75"\n                            r="70"\n                            stroke="${r}"\n                            stroke-width="10"\n                            fill="none"\n                            stroke-linecap="round"\n                            stroke-dasharray="439.82"\n                            stroke-dashoffset="${439.82*(1-i/100)}"\n                            transform="rotate(-90 75 75)"\n                            style="transition: stroke-dashoffset 1s"\n                        />\n                    </svg>\n                    <div class="probability-text">\n                        <div class="probability-value" style="color: ${r}">${i}%</div>\n                        <div class="probability-label" style="\n                            font-size: 12px;\n                            color: #333;\n                            margin-top: 10px;\n                        ">Deepfake Probability</div>\n                    </div>\n                </div>\n\n                <div class="confidence-indicators">\n                    <div class="indicator real">\n                        <div class="indicator-dot"></div>\n                        <div class="indicator-label">Likely Real</div>\n                    </div>\n                    <div class="indicator uncertain">\n                        <div class="indicator-dot"></div>\n                        <div class="indicator-label" style="white-space: nowrap;">Uncertain</div>\n                    </div>\n                    <div class="indicator fake">\n                        <div class="indicator-dot"></div>\n                        <div class="indicator-label">Likely Deepfake</div>\n                    </div>\n                </div>\n\n                <div class="request-count" data-tooltip="${1===n.requestCount?"The analysis results were determined in near-real-time":"Displaying cached analysis results"}">\n                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n                        <path d="M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM12 20C7.6 20 4 16.4 4 12C4 7.6 7.6 4 12 4C16.4 4 20 7.6 20 12C20 16.4 16.4 20 12 20Z" fill="#666"/>\n                        <path d="M12.5 7H11V13L16.2 16.2L17 14.9L12.5 12.2V7Z" fill="#666"/>\n                    </svg>\n                    ${1===n.requestCount?"You're the first to analyze this image":`Image analyzed ${n.requestCount} time${1!==n.requestCount?"s":""}`}\n                </div>\n\n                <div class="analysis-details-accordion">\n                    <button class="accordion-button">\n                        <span>View Analysis Details</span>\n                    </button>\n                    \n                    <div class="accordion-content">\n                        <div class="details-section">\n                            <div class="model-comparison">\n                                <div class="model-result ${a.probability>s.probability?"selected":""}">\n                                    <h4 style="font-size: 12px;">DMImageDetection</h4>\n                                    <div class="model-probability">${(100*a.probability).toFixed(1)}%</div>\n                                </div>\n                                <div class="model-result ${s.probability>a.probability?"selected":""}">\n                                    <h4 style="font-size: 12px;">UniversalFakeDetect</h4>\n                                    <div class="model-probability">\n                                        <div class="bar-fill" style="width: ${(100*s.probability).toFixed(1)}%"></div>\n                                        <span>${(100*s.probability).toFixed(1)}%</span>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div class="details-grid">\n                                ${w("File Name",n.originalFileName,"Original filename of the uploaded image")}\n                                ${w("File Size",`${(n.fileSize/1024).toFixed(2)} KB`,"Size of the image file in kilobytes")}\n                                ${w("Dimensions",`${n.metadata.sharp.width}x${n.metadata.sharp.height}`,"Width and height of the image in pixels")}\n                                ${w("Format",n.metadata.sharp.format.toUpperCase(),"Image file format")}\n                                ${w("Color Space",n.metadata.sharp.space.toUpperCase(),"Color space used by the image (sRGB, CMYK, etc.)")}\n                                ${w("Channels",n.metadata.sharp.channels,"Number of color channels in the image")}\n                                ${w("Bit Depth",n.metadata.sharp.depth,"Bits per channel used to represent colors")}\n                                ${w("Resolution",`${n.metadata.sharp.density} DPI`,"Image resolution in dots per inch (DPI)")}\n                                ${w("Chroma Subsampling",n.metadata.sharp.chromaSubsampling,"Type of chroma subsampling used for color compression")}\n                                ${w("Progressive Loading",n.metadata.sharp.isProgressive?"Yes":"No","Whether the image uses progressive loading")}\n                                ${w("Has Alpha Channel",n.metadata.sharp.hasAlpha?"Yes":"No","Whether the image contains transparency")}\n                                ${w("Has Color Profile",n.metadata.sharp.hasProfile?"Yes":"No","Whether the image contains a color profile")}\n                                ${w("Image Hash",n.imageHash,"Unique SHA-256 hash of the image content")}\n                                ${w("Perceptual Hash",n.pHash,"Perceptual hash used for finding similar images")}\n                                ${w("Upload Date",new Date(n.uploadDate).toLocaleString(),"When the image was uploaded for analysis")}\n                                ${w("Origin Website",n.originWebsites?.[0]||"Unknown","Website where the image was found")}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="feedback-section">\n                    <p>Was this analysis helpful?</p>\n                    <div class="feedback-buttons">\n                        <button class="feedback-btn thumbs-up" data-image-hash="${n.imageHash}" data-value="up">\n                            <span>👍</span>\n                        </button>\n                        <button class="feedback-btn thumbs-down" data-image-hash="${n.imageHash}" data-value="down">\n                            <span>👎</span>\n                        </button>\n                    </div>\n                    <div class="feedback-comment" style="display: none;">\n                        <div class="textarea-container">\n                            <textarea placeholder="Tell us why (optional)" maxlength="100"></textarea>\n                            <div class="char-counter">0/100 characters</div>\n                        </div>\n                        <button class="submit-feedback-btn">Submit Feedback</button>\n                    </div>\n                </div>\n            `;const c=document.createElement("style");c.textContent="\n                .close-x {\n                    position: absolute;\n                    top: 5px;\n                    right: 10px;\n                    cursor: pointer;\n                    font-size: 20px;\n                    color: #666;\n                    transition: color 0.2s;\n                }\n                .close-x:hover {\n                    color: #333;\n                }\n            ",document.head.appendChild(c);const d=e.querySelectorAll(".feedback-btn"),u=e.querySelector(".feedback-comment"),m=e.querySelector(".submit-feedback-btn"),p=e.querySelector("textarea"),h=e.querySelector(".char-counter");d.forEach((e=>{e.addEventListener("click",(()=>{d.forEach((e=>e.classList.remove("active"))),e.classList.add("active"),u.style.display="block"}))})),p.addEventListener("input",(()=>{const e=p.value.length;h.textContent=`${e}/100 characters`,h.classList.remove("near-limit","at-limit"),e>=90?h.classList.add("at-limit"):e>=75&&h.classList.add("near-limit")})),m.addEventListener("click",(async()=>{m.disabled=!0,m.innerHTML='\n            <span class="spinner"></span>\n            Sending...\n          ';const{authToken:n}=await chrome.storage.local.get(["authToken"]);if(console.log("Retrieved authToken:",n?"Token exists":"No token found"),!n)return console.error("No auth token found"),void(m.innerHTML="Error: Please log in");const a=t(n),s=a?.username||null;console.log("Final userId to be submitted:",s);const o=e.querySelectorAll(".feedback-btn"),i=e.querySelector("textarea"),r=o[0].dataset.imageHash,l=Array.from(o).find((e=>e.classList.contains("active")))?.getAttribute("data-value"),c=i?.value?.trim()||"";if(l){console.log("Submitting feedback with data:",{imageHash:r,feedbackType:l,comment:c,userId:s});try{chrome.runtime.sendMessage({action:"submitFeedback",feedbackData:{imageHash:r,feedbackType:l,comment:c,userId:s},origin:window.location.origin},(t=>{if(console.log("Feedback submission response:",t),t.success){const t=e.querySelector(".feedback-section");t.style.marginTop="0",t.innerHTML='\n                    <div class="feedback-success">\n                      <div class="icon-container">\n                        <svg class="status-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">\n                          <circle cx="26" cy="26" r="25" fill="none" stroke="#4CAF50" stroke-width="2"/>\n                          <path fill="none" stroke="#4CAF50" stroke-width="2" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>\n                        </svg>\n                      </div>\n                      <h3 class="feedback-title">Thank you!</h3>\n                      <p class="feedback-message">Your feedback helps improve our analyses</p>\n                    </div>\n                  '}else if(t.alreadySubmitted){const t=e.querySelector(".feedback-section");t.style.marginTop="0",t.innerHTML='\n                    <div class="feedback-already-submitted">\n                      <div class="icon-container">\n                        <svg class="status-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">\n                          <circle cx="26" cy="26" r="25" fill="none" stroke="#3498db" stroke-width="2"/>\n                          <path fill="none" stroke="#3498db" stroke-width="2" d="M26 15v2m0 7v13"/>\n                        </svg>\n                      </div>\n                      <h3 class="feedback-title" style="color: #3498db;">Already Submitted</h3>\n                      <p class="feedback-message">You\'ve already provided feedback for this image</p>\n                    </div>\n                  '}else{m.disabled=!1,m.innerHTML="Submit Feedback";const e=document.createElement("p");e.className="feedback-error",e.textContent=`Error: ${t.error||"Failed to submit feedback"}`,m.parentNode.insertBefore(e,m.nextSibling)}}))}catch(e){console.error("Error in feedback submission:",e),m.disabled=!1,m.innerHTML="Submit Feedback";const t=document.createElement("p");t.className="feedback-error",t.textContent="Error: Failed to submit feedback",m.parentNode.insertBefore(t,m.nextSibling)}}else console.error("No feedback selected")})),console.log("Feedback buttons:",{feedbackBtns:e.querySelectorAll(".feedback-btn"),submitBtn:e.querySelector(".submit-feedback-btn"),feedbackComment:e.querySelector("textarea")}),p.addEventListener("input",(()=>{const e=p.value.length;h.textContent=`${e}/100 characters`,h.classList.remove("near-limit","at-limit"),e>=90?h.classList.add("at-limit"):e>=75&&h.classList.add("near-limit")}));const g=e.querySelector(".accordion-button"),y=e.querySelector(".accordion-content");g.addEventListener("click",(()=>{const e="block"===y.style.display;y.style.display=e?"none":"block"}))}else e.innerHTML='\n                <div class="error-container">\n                    <div class="close-x">×</div>\n                    <p class="error">No analysis results available</p>\n                </div>\n            '}e.setAttribute("data-overlay-id",s);const o=e.querySelector(".close-x");o&&o.addEventListener("click",(()=>{e.remove()}))}const p=e(c,500);function h(e){for(const t of e)if(("childList"===t.type||"attributes"===t.type)&&(t.addedNodes.length>0||"attributes"===t.type&&"src"===t.attributeName)){clearTimeout(v),v=setTimeout((()=>{c()}),f);break}}function g(){document.querySelectorAll("img:not([data-overlay-processed])").forEach(((e,t)=>d(e,t)))}async function y(){if(!chrome.runtime||!chrome.runtime.id)return;const t=window.location.hostname;i=t.includes("linkedin.com")?"linkedin":t.includes("facebook.com")?"facebook":t.includes("twitter.com")||t.includes("x.com")?"twitter":t.includes("instagram.com")?"instagram":t.includes("reddit.com")?"reddit":null,i&&(await l()?(s=!0,o=!0,async function(){await l()&&c()}(),n=new MutationObserver((e=>{e.forEach((e=>{"childList"===e.type&&e.addedNodes.forEach((e=>{e.nodeType===Node.ELEMENT_NODE&&e.querySelectorAll("img:not([data-overlay-processed])").forEach(((e,t)=>d(e,t)))}))}))})),n.observe(document.body,{childList:!0,subtree:!0}),setInterval(g,2e3),window.addEventListener("scroll",e((()=>{c()}),200)),a=new MutationObserver(h),a.observe(document.body,{childList:!0,subtree:!0})):(s=!1,o=!1,r(),n&&n.disconnect(),a&&a.disconnect(),window.removeEventListener("scroll",p)))}setInterval((function(){chrome.runtime.id||location.reload()}),6e4),chrome.runtime.onMessage.addListener(((e,t,n)=>{return"settingsChanged"===e.action&&((r=e.changes).enableOverlay&&(s=r.enableOverlay.newValue),y(),n({success:!0})),"updateSettings"===e.action&&(a=e.settings,s=!1!==a.enableOverlay,o=!1!==a[i],s&&o?(document.querySelectorAll(".image-overlay").forEach((e=>{e.style.display="flex"})),c()):document.querySelectorAll(".image-overlay").forEach((e=>{e.style.display="none"})),n({status:"Settings updated"})),!0;var a,r})),y();const b=document.createElement("style");let v;b.innerHTML="",document.head.appendChild(b);const f=300;window.addEventListener("error",(e=>{e.error}));const w=(e,t,n)=>`\n    <div class="detail-row">\n        <span class="detail-label" title="${n}">${e}</span>\n        <span class="detail-value">${t}</span>\n    </div>\n  `})();
//# sourceMappingURL=social-content.js.map