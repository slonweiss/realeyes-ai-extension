{"version":3,"file":"social-content.js","mappings":"AAAA,MAGE,SAASA,EAASC,EAAMC,GACtB,IAAIC,EACJ,OAAO,YAA6BC,GAKlCC,aAAaF,GACbA,EAAUG,YALI,KACZD,aAAaF,GACbF,KAAQG,EAAK,GAGaF,EAC9B,CACF,CAGA,SAASK,EAAUC,GACjB,IACE,MACMC,EADYD,EAAME,MAAM,KAAK,GACVC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KACpDC,EAAcC,mBAClBC,KAAKL,GACFC,MAAM,IACNK,KAAKC,GACG,KAAO,KAAOA,EAAEC,WAAW,GAAGC,SAAS,KAAKC,OAAO,KAE3DC,KAAK,KAEJC,EAAUC,KAAKC,MAAMX,GAG3B,OAFAY,QAAQC,IAAI,uBAAwBJ,GACpCG,QAAQC,IAAI,oBAAqBJ,EAAQK,UAClCL,CACT,CAAE,MAAOM,GAEP,OADAH,QAAQG,MAAM,sBAAuBA,GAC9B,IACT,CACF,CAGA,IAQIC,EACAC,EATAC,GAAmB,EACnBC,GAAc,EACdC,EAAc,KAUlB,SAASC,IACUC,SAASC,iBAAiB,kBAClCC,SAASC,GAAYA,EAAQC,UACxC,CAGAC,eAAeC,IACb,IACE,MAAMC,QAAc,IAAIC,SAAQ,CAACC,EAASC,KACxCC,OAAOC,QAAQC,KAAKC,IAClB,CACE,gBACA,WACA,UACA,YACA,WACA,WAEDP,IACKI,OAAOI,QAAQC,UACjBN,EAAOC,OAAOI,QAAQC,WAEtBP,EAAQF,EACV,GAEH,IAMH,OAHAX,GAA2C,IAAxBW,EAAMU,cACzBpB,GAAqC,IAAvBU,EAAMT,GAEbF,GAAoBC,CAC7B,CAAE,MAAOJ,GAEP,OADAH,QAAQG,MAAM,+BAAgCA,IACvC,CACT,CACF,CAGAY,eAAea,IAEb,UAD4BZ,IAG1B,YADAP,IAIF,MAAMoB,EAAY,IAGlB,SAASC,EAASC,GACZA,EAAKC,WAAaC,KAAKC,eAEM,QAA/BH,EAAKI,QAAQC,eACZL,EAAKM,QAAQC,kBAEdT,EAAUU,KAAKR,GAGbA,EAAKS,YACPV,EAASC,EAAKS,YAGhBT,EAAKU,WAAW7B,SAAS8B,GAAUZ,EAASY,KAC9C,EAEAZ,CAASpB,SAASiC,MAGE,cAAhBnC,GACsBE,SAASC,iBAC/B,sCAEcC,SAASgC,IAClBA,EAAIP,QAAQC,kBACfT,EAAUU,KAAKK,EACjB,IAKgB,WAAhBpC,GACmBE,SAASC,iBAAiB,yBAClCC,SAASgC,GAAQf,EAAUU,KAAKK,KAI/Cf,EAAUjB,SAAQ,CAACgC,EAAKC,KACtB,GACGD,EAAIE,MAAQ,IAAMF,EAAIG,OAAS,IAC/BH,EAAII,aAAa,SAAW,IAAMJ,EAAII,aAAa,UAAY,IAChEJ,EAAIK,UAAUC,SAAS,sBAEvB,IACMN,EAAIO,UAAYP,EAAIQ,aAAe,EACrCC,EAAaT,EAAKC,GAElBD,EAAIU,iBACF,QACA,KACED,EAAaT,EAAKC,EAAM,GAE1B,CAAEU,MAAM,GAGd,CAAE,MAAOpD,GACPH,QAAQG,MAAM,0BAA2BA,EAC3C,MAEAyC,EAAIP,QAAQC,iBAAmB,SACjC,GAEJ,CAGA,SAASe,EAAaT,EAAKC,GACzB,GAAqC,SAAjCD,EAAIP,QAAQC,iBACd,OAIF,MAAMjC,EAAW,IAAImD,sBAClBC,IACCA,EAAQ7C,SAAS8C,IACXA,EAAMC,kBAELf,EAAIE,MAAQ,KAAOF,EAAIG,OAAS,KACH,UAA9BH,EAAIT,QAAQC,gBAEZwB,EAA0BhB,EAAKC,GAEjCxC,EAASwD,UAAUjB,GACrB,GACA,GAEJ,CAAEkB,UAAW,KAGfzD,EAAS0D,QAAQnB,GAEjBA,EAAIP,QAAQC,iBAAmB,OAG/BM,EAAIoB,QAAU,WAEd,EAGApB,EAAIqB,OAAS,YAERrB,EAAIE,MAAQ,KAAOF,EAAIG,OAAS,KACH,UAA9BH,EAAIT,QAAQC,gBAEZwB,EAA0BhB,EAAKC,EAEnC,CACF,CAGA,SAASe,EAA0BhB,EAAKC,GAEtC,MAAMqB,EAAW,WAAWrB,KAASsB,KAAKC,QAE1C,IAAIvD,EAAUH,SAAS2D,cACrB,kCAAkCzB,EAAI0B,SAGxC,IAAKzD,EAAS,CACZA,EAAUH,SAAS6D,cAAc,OACjC1D,EAAQ2D,UAAY,gBACpB3D,EAAQwB,QAAQoC,SAAW7B,EAAI0B,IAC/BzD,EAAQwB,QAAQqC,UAAYR,EAG5B,MAAMS,EAAUjE,SAAS6D,cAAc,OACvCI,EAAQL,IAAMjD,OAAOI,QAAQmD,OAAO,8BACpCD,EAAQE,MAAMC,QAAU,wFAIJ,WAAhBtE,EAA2B,oBAAsB,aAGrDK,EAAQgE,MAAMC,QAAU,4kBAmBxBjE,EAAQkE,YAAYJ,GAEpB9D,EAAQmE,QAAUjE,MAAOkE,IACvBA,EAAEC,kBACFD,EAAEE,iBAGF,MAAMC,EAAgB1E,SAAS2D,cAC7B,mCAAmCxD,EAAQwB,QAAQqC,eAIrD,GAAIU,EAEF,YADAA,EAActE,SAIhB,MAAMuE,EAoiCZ,SAAmCzC,GACjC,GAAoB,cAAhBpC,EAA6B,CAE/B,MAAM8E,EAAS5E,SAAS6D,cAAc,UACtCe,EAAOxC,MAAQF,EAAIQ,aACnBkC,EAAOvC,OAASH,EAAI2C,cACRD,EAAOE,WAAW,MAC1BC,UAAU7C,EAAK,EAAG,GACtB,IACE,OAAO0C,EAAOI,UAAU,aAC1B,CAAE,MAAOT,GAGP,OAFAjF,QAAQG,MAAM,4BAA6B8E,GAEpCrC,EAAI0B,GACb,CACF,CAEA,MAAMqB,EAAc/C,EAAI0B,IACxB,IAAIsB,EAAiBD,EAErB,GAAoB,aAAhBnF,EAA4B,CAI9B,GAFoD,OAAlDoC,EAAIiD,QAAQ,kCAGZ,OAAOF,EAGT,IACE,MAAMG,EAAY,IAAIC,IAAIJ,GACpBK,EAAWF,EAAUE,SAG3BF,EAAUG,aAAaC,OAAO,KAC9BJ,EAAUG,aAAaC,OAAO,KAG9BJ,EAAUG,aAAaE,IAAI,IAAK,QAChCL,EAAUG,aAAaE,IAAI,IAAK,QAEhCP,EAAiBE,EAAUpG,WAG3B,MAAM0G,EAAoBJ,EAAS9G,MAAM,KAAKmH,MAAMjE,cAChD,CAAC,MAAO,OAAQ,MAAO,MAAO,QAAQkE,SAASF,KAC5CR,EAAexD,cAAcmE,SAAS,IAAIH,OAC7CR,GAAkB,IAAIQ,KAG5B,CAAE,MAAOjG,GACPH,QAAQG,MAAM,sCAAuCA,GACrDyF,EAAiBD,CACnB,CACF,MAAO,GAAoB,cAAhBnF,GACLmF,EAAYW,SAAS,YACvB,IACE,MAAME,EAAM,IAAIT,IAAIJ,GACpBa,EAAIP,aAAaC,OAAO,WACxBM,EAAIP,aAAaC,OAAO,WACxBM,EAAIP,aAAaC,OAAO,UACxBM,EAAIP,aAAaC,OAAO,OACxBM,EAAIP,aAAaC,OAAO,MACxBM,EAAIP,aAAaC,OAAO,MACxBN,EAAiBY,EAAI9G,UACvB,CAAE,MAAOS,GACPH,QAAQG,MAAM,uCAAwCA,EACxD,CAIJ,OAAOyF,CACT,CA3mCgCa,CAA0B7D,GAC9CsB,EAAWrD,EAAQwB,QAAQqC,UAEjC,IACE,MAAM,UAAEgC,SAAoBrF,OAAOC,QAAQqF,MAAMnF,IAAI,CAAC,cAEtD,IAAKkF,EAAW,CAEShG,SAASC,iBAAiB,kBAClCC,SAASgG,GAAUA,EAAM9F,WAExC,MAAM+F,EAAYnG,SAAS6D,cAAc,OACzCsC,EAAUrC,UAAY,gBACtBqC,EAAUC,aACR,kBACAjG,EAAQwB,QAAQqC,WAElBmC,EAAUE,UAAY,myBAetBrG,SAASiC,KAAKoC,YAAY8B,GAG1B,MAAMG,EAAsB,KAC1B,MAAMC,EAAcpG,EAAQqG,wBACtBC,EAAUC,OAAOD,SAAWC,OAAOC,YAGzC,IAAIC,EAAOL,EAAYM,MAAQ,GAC3BC,EAAMP,EAAYO,IAAML,EAGxBG,EAAOT,EAAUY,YAAcL,OAAOM,WAAa,KACrDJ,EAAOL,EAAYK,KAAOT,EAAUY,YAAc,IAIpD,MAAME,EACJjH,SAASkH,gBAAgBC,aACzBhB,EAAUiB,aACV,GACFN,EAAMO,KAAKC,IAAI,GAAID,KAAKE,IAAIT,EAAKG,IAEjCd,EAAUhC,MAAMqD,SAAW,WAC3BrB,EAAUhC,MAAMyC,KAAO,GAAGA,MAC1BT,EAAUhC,MAAM2C,IAAM,GAAGA,KAAO,EAIlC1I,WAAWkI,EAAqB,GAGhC,MAAMmB,EAAkB3J,EAASwI,EAAqB,KACtDI,OAAO9D,iBAAiB,SAAU6E,GAClCf,OAAO9D,iBAAiB,SAAU6E,GAGlC,MAAMC,EAAcvB,EAAUxC,cAAc,YACtCgE,EAAcxB,EAAUxC,cAAc,gBACtCiE,EAAezB,EAAUxC,cAAc,eAEvCkE,EAAU,KACdnB,OAAOoB,oBAAoB,SAAUL,GACrCf,OAAOoB,oBAAoB,SAAUL,GACrCtB,EAAU/F,QAAQ,EAiDpB,OA7CAsH,EAAY9E,iBAAiB,QAASiF,GACtCF,EAAY/E,iBAAiB,SAAS,KAEpCjC,OAAOI,QAAQgH,YACb,CAAEC,OAAQ,kBACTC,KACKtH,OAAOI,QAAQC,WAAciH,GAAUC,SAEzCxB,OAAOyB,KAAK,mCAAoC,SAClD,IAGJhC,EAAU/F,QAAQ,IAIpBwH,EAAahF,iBAAiB,SAAS,KACrCuD,EAAU/F,QAAQ,IAIpBJ,SAAS4C,iBAAiB,SAAS,SAASwF,EAAWC,GAElDlC,EAAU3D,SAAS6F,EAAMC,SACzBnI,EAAQqC,SAAS6F,EAAMC,UAExBT,IACA7H,SAAS8H,oBAAoB,QAASM,GAE1C,SAGiB,IAAItF,sBAClBC,IACCA,EAAQ7C,SAAS8C,IACVA,EAAMC,gBACT4E,GACF,GACA,GAEJ,CAAEzE,UAAW,KAGNC,QAAQlD,EAGnB,CAGIwE,EAmGZ,SAA0B2D,EAAQC,EAAUvE,GAE1C,IAAIU,EAAgB1E,SAAS2D,cAC3B,kCAAkC4E,OASpC,GANK7D,IACHA,EAAgB1E,SAAS2D,cACvB,mCAAmCK,QAInCU,EACF,OAAOA,EAIc1E,SAASC,iBAAiB,kBAClCC,SAASgG,GAAUA,EAAM9F,WAExC,MAAM8F,EAAQlG,SAAS6D,cAAc,OACrCqC,EAAMpC,UAAY,gBAClBoC,EAAME,aAAa,iBAAkBmC,GACrCrC,EAAME,aAAa,kBAAmBpC,GAGtCkC,EAAMG,UAAY,2hBAclBrG,SAASiC,KAAKoC,YAAY6B,GAG1B,MAAMvG,EAAW,IAAImD,sBAClBC,IACCA,EAAQ7C,SAAS8C,IACXA,EAAMC,gBAERiD,EAAM/B,MAAMqE,QAAU,OACtBlC,KAGAJ,EAAM/B,MAAMqE,QAAU,MACxB,GACA,GAEJ,CAAEpF,UAAW,KAGfzD,EAAS0D,QAAQiF,GAGjB,MAAMhC,EAAsB,KAC1B,GAA4B,SAAxBJ,EAAM/B,MAAMqE,QAAoB,OAEpC,MAAMjC,EAAc+B,EAAO9B,wBACrBC,EAAUC,OAAOD,SAAWC,OAAOC,YAGzC,IAAIC,EAAOL,EAAYM,MAAQ,GAC3BC,EAAMP,EAAYO,IAAML,EAGxBG,EAAOV,EAAMa,YAAcL,OAAOM,WAAa,KACjDJ,EAAOL,EAAYK,KAAOV,EAAMa,YAAc,IAIhD,MAAME,EACJjH,SAASkH,gBAAgBC,aAAejB,EAAMkB,aAAe,GAC/DN,EAAMO,KAAKC,IAAI,GAAID,KAAKE,IAAIT,EAAKG,IAEjCf,EAAM/B,MAAMqD,SAAW,WACvBtB,EAAM/B,MAAMyC,KAAO,GAAGA,MACtBV,EAAM/B,MAAM2C,IAAM,GAAGA,KAAO,EAIH,IAAIhE,sBAC5BC,IACCA,EAAQ7C,SAAS8C,IACVA,EAAMC,iBACTiD,EAAM/B,MAAMqE,QAAU,OACxB,GACA,GAEJ,CAAEpF,UAAW,IAGIC,QAAQiF,GAG3BlK,WAAWkI,EAAqB,GAGhC,MAAMmB,EAAkB3J,EAASwI,EAAqB,KACtDI,OAAO9D,iBAAiB,SAAU6E,GAClCf,OAAO9D,iBAAiB,SAAU6E,GAWlCvB,EACGvC,cAAc,iBACbf,iBAAiB,SAASvC,MAAOkE,IACjCA,EAAEE,iBAEF,MAAMgE,EAAoBvC,EAAMvC,cAAc,mBACxC+E,IAAYD,GAAoBA,EAAkBE,QAGxDzC,EAAMG,UAAY,0JAiBxB,SAA8BP,EAAKI,EAAOwC,GACxC,IAAIE,EAAW9C,EAAItH,MAAM,KAAKmH,MAAMnH,MAAM,KAAK,GAC3CqK,EAAW,aAGflI,OAAOC,QAAQqF,MAAMnF,IAAI,CAAC,cAAcT,eAAgByI,GACtD,MAAM9C,EAAY8C,EAAO9C,UAEzB,IAAKA,EAAW,CACdE,EAAMG,UAAY,6qBAqBlB,MAAMsB,EAAczB,EAAMvC,cAAc,gBAkCxC,OAjCAgE,EAAY/E,iBAAiB,aAAa,KACxC+E,EAAYxD,MAAM4E,gBAAkB,SAAS,IAE/CpB,EAAY/E,iBAAiB,YAAY,KACvC+E,EAAYxD,MAAM4E,gBAAkB,SAAS,SAE/CpB,EAAY/E,iBAAiB,SAAS,KAEpCjC,OAAOqI,QAAQlI,IACb,CACEgF,IAAK,sBACLmD,KAAM,qBAER,SAAUC,GACJA,GAAUA,EAAOC,MAEnBxI,OAAOC,QAAQqF,MAAMR,IACnB,CAAEO,UAAWkD,EAAOC,QACpB,WAEEjD,EAAM9F,SACNc,GACF,KAIFwF,OAAOyB,KAAK,mCAAoC,UAChDjC,EAAM9F,SAEV,GACD,GAIL,CAGA,MAAMgJ,EAAe/K,EAAU2H,GACzBqD,EAASD,GAAc5J,UAAY,KAEzC,GAAIsG,EAAIF,SAAS,aAAc,CAE7B,MAAM0D,EAAS,IAAIjE,IAAIS,GAAKP,aAAazE,IAAI,UACzCwI,IACFV,GAAY,IAAIU,IAChBT,EAAW,SAASS,IAExB,MACET,EAolBN,SAAqBD,GASnB,MAPkB,CAChBW,IAAK,aACLC,KAAM,aACNC,IAAK,YACLC,IAAK,YACLC,KAAM,cANIf,EAASpK,MAAM,KAAKmH,MAAMjE,gBAQb,0BAC3B,CA9lBiBkI,CAAYhB,GAGzBiB,MAAM/D,GACHgE,MAAM7B,IACL,IAAKA,EAAS8B,GACZ,MAAM,IAAIC,MAAM,uBAAuB/B,EAASgC,UAElD,OAAOhC,EAASiC,aAAa,IAE9BJ,MAAMI,IACL,MAAMC,EAAa,IAAIC,WAAWF,GAClC,OAAOG,OAAOC,OACXC,OAAO,UAAWJ,GAClBL,MAAMU,IACL,MACMC,EADYC,MAAMC,KAAK,IAAIP,WAAWI,IAEzC3L,KAAK+L,GAAMA,EAAE5L,SAAS,IAAI6L,SAAS,EAAG,OACtC3L,KAAK,IACR,MAAO,CAAEiL,aAAYM,UAAS,GAC9B,IAELX,MAAK,EAAGK,aAAYM,cACnB9J,OAAOI,QAAQgH,YACb,CACEC,OAAQ,YACR8C,UAAW,CACThF,MACA+C,WACAD,WACAmC,KAAMZ,EAAWa,OACjBC,WAAYR,EACZS,OAAQxE,OAAOyE,SAASD,OACxBxC,UAAWA,EACXW,OAAQA,KAGXpB,IACKtH,OAAOI,QAAQC,UACjBoK,EACElF,EACA,UAAYvF,OAAOI,QAAQC,UAAUqK,QACrC,SAE0B,4BAAnBpD,EAASxI,MAClB2L,EACElF,EACA,wDACA,SAGFkF,EAAuBlF,EAAO+B,EAAU,UAC1C,GAEH,IAEFqD,OAAO7L,IACNH,QAAQG,MAAM,SAAUA,GACxB2L,EAAuBlF,EAAO,UAAYzG,EAAM4L,QAAS,QAAQ,GAEvE,GACF,CArJYE,CAAqBhD,EAAUrC,EAAOwC,EAAU,IAI1DxC,EAAMvC,cAAc,gBAAgBf,iBAAiB,SA7BrC,KACd8D,OAAOoB,oBAAoB,SAAUL,GACrCf,OAAOoB,oBAAoB,SAAUL,GACrC9H,EAAS6L,aACTtF,EAAM9F,QAAQ,GA4BlB,CAhPUqL,CAAiBtL,EAASwE,EAAmBnB,GAE7CkI,EAAY,2BAA4B,QAE5C,CAAE,MAAOjM,GACPH,QAAQG,MAAM,+BAAgCA,GAC9CiM,EAAY,uCAAwC,QACtD,GAEFxJ,EAAIyJ,cAActH,YAAYlE,GAE9BA,EAAQyC,iBAAiB,cAAc,KACrCzC,EAAQgE,MAAMyH,QAAU,IACxBzL,EAAQgE,MAAM4E,gBAAkB,0BAA0B,IAG5D5I,EAAQyC,iBAAiB,cAAc,KACrCzC,EAAQgE,MAAMyH,QAAU,MACxBzL,EAAQgE,MAAM4E,gBAAkB,0BAA0B,GAE9D,CAEA,MAAM8C,EAAwB/N,GAAS,KACrC,MAAMgO,EAAO5J,EAAIsE,wBACXuF,EAAiBrF,OAAOsF,YACxBC,EAAgBvF,OAAOM,WAEvBkF,EACJJ,EAAKhF,IAAMiF,GACXD,EAAKK,OAAS,GACdL,EAAKlF,KAAOqF,GACZH,EAAKjF,MAAQ,EAETuF,EAAqD,OAAvClK,EAAIiD,QAAQ,uBAC1BkH,EAC0B,UAA9BnK,EAAIT,QAAQC,eAA6BQ,EAAIyB,cAAc,SAE7D,IACEuI,KACEJ,EAAK1J,MAAQ,KAAO0J,EAAKzJ,OAAS,KAAQgK,IAC1CD,GAAoC,OAArBlK,EAAIoK,aASZD,GACTlM,EAAQgE,MAAMqE,QAAU,OACxBrI,EAAQgE,MAAM2C,IAAM,OACpB3G,EAAQgE,MAAM0C,MAAQ,OACtB1G,EAAQgE,MAAMgI,OAAS,OACvBhM,EAAQgE,MAAMyC,KAAO,QAErBxI,YAAW,KACJ8N,IACH/L,EAAQgE,MAAMqE,QAAU,OAC1B,GACC,SAnBH,CACArI,EAAQgE,MAAMqE,QAAU,OACxB,MAAM1B,EAAM,GACND,EAAQ,GACd1G,EAAQgE,MAAM2C,IAAM,GAAGA,MACvB3G,EAAQgE,MAAM0C,MAAQ,GAAGA,MACzB1G,EAAQgE,MAAMgI,OAAS,OACvBhM,EAAQgE,MAAMyC,KAAO,MACvB,CAYA,GACC,KAIH,GAFAiF,KAEK3J,EAAIP,QAAQ4K,2BAA4B,CAC3C,MAAMC,EAAgB,KACpBX,GAAuB,EAEnBY,EAAgB,KACpBZ,GAAuB,EAEzBnF,OAAO9D,iBAAiB,SAAU4J,EAAe,CAAEE,SAAS,IAC5DhG,OAAO9D,iBAAiB,SAAU6J,EAAe,CAAEC,SAAS,IAC5DxK,EAAIP,QAAQ4K,2BAA6B,MAC3C,CAEiB,IAAII,kBAAkBC,IACrCA,EAAU1M,SAAS2M,IAEG,eAAlBA,EAASC,MACmB,QAA3BD,EAASE,eACmB,UAA3BF,EAASE,gBAEX5M,EAAQwB,QAAQoC,SAAW7B,EAAI0B,IAC/BiI,IACF,GACA,IAGKxI,QAAQnB,EAAK,CACpB8K,YAAY,EACZC,gBAAiB,CAAC,MAAO,UAE7B,CAkSA,SAAS7B,EAAuBlF,EAAOgH,EAASjD,GAC9C,MAAMjG,EAAYkC,EAAM5D,aAAa,mBAGrC,GAFA4D,EAAMG,UAAY,GAEH,UAAX4D,EACF/D,EAAMG,UAAY,+HAGW6G,0CAGxB,CAEL,MAAMC,EAAmBD,EAAQE,mBAAqB,CAAEC,YAAa,GAC/DC,EAAcJ,EAAQK,sBAAwB,CAAEF,YAAa,GAG7DG,EACJL,EAAiBE,YAAcC,EAAYD,YACvCF,EACAG,EAEN,GAAIE,EAAU,CACZ,MAAMH,GAAsC,IAAvBG,EAASH,aAAmBI,QAAQ,GAGzD,IAAIC,EACAC,EACAN,EAAc,IAChBK,EAAkB,UAClBC,EAAY,gCACHN,EAAc,IACvBK,EAAkB,UAClBC,EAAY,oDAEZD,EAAkB,UAClBC,EAAY,sCAGdzH,EAAMG,UAAY,6GAEkCqH,MAAoBC,8mBAgB1CD,yPAMR,QAAU,EAAIL,EAAc,4TAOaK,MAAoBL,+lCAyBhD,IAAzBH,EAAQU,aACJ,yDACA,ygBAOyB,IAAzBV,EAAQU,aACJ,yCACA,kBAAkBV,EAAQU,oBACC,IAAzBV,EAAQU,aAAqB,IAAM,seAc7BT,EAAiBE,YACjBC,EAAYD,YACR,WACA,mNAMIQ,IADAV,EAAiBE,YAEb,IAEE,IADAF,EAAiBE,aAEjBI,QAAQ,MACV,6JAKZH,EAAYD,YACZF,EAAiBE,YACb,WACA,sNAKgCQ,IAA5BP,EAAYD,YACR,IAC4B,IAA1BC,EAAYD,aACZI,QAAQ,MACV,mnBAcZK,EACA,YACAZ,EAAQa,iBACR,+EAEAD,EACA,YACA,IAAIZ,EAAQc,SAAW,MAAMP,QAAQ,QACrC,2EAEAK,EACA,aACA,GAAGZ,EAAQe,SAASC,MAAM9L,SAAS8K,EAAQe,SAASC,MAAM7L,SAC1D,6EAEAyL,EACA,SACAZ,EAAQe,SAASC,MAAM5E,OAAO6E,cAC9B,yDAEAL,EACA,cACAZ,EAAQe,SAASC,MAAME,MAAMD,cAC7B,wFAEAL,EACA,WACAZ,EAAQe,SAASC,MAAMG,SACvB,6EAEAP,EACA,YACAZ,EAAQe,SAASC,MAAMI,MACvB,mKAEAR,EACA,aACA,GAAGZ,EAAQe,SAASC,MAAMK,cAC1B,+EAEAT,EACA,qBACAZ,EAAQe,SAASC,MAAMM,kBACvB,6FAEAV,EACA,sBACAZ,EAAQe,SAASC,MAAMO,cACnB,MACA,KACJ,+MAEAX,EACA,oBACAZ,EAAQe,SAASC,MAAMQ,SACnB,MACA,KACJ,+EAEAZ,EACA,gBACAZ,EAAQe,SAASC,MAAMS,WACnB,MACA,KACJ,gLAEAb,EACA,aACAZ,EAAQ0B,UACR,6JAEAd,EACA,kBACAZ,EAAQ2B,MACR,qLAEAf,EACA,cACA,IAAIrK,KAAKyJ,EAAQ4B,YAAYC,iBAC7B,gFAEAjB,EACA,iBACAZ,EAAQ8B,iBAAiB,IAAM,UAC/B,+YAWR9B,EAAQ0B,kMAKR1B,EAAQ0B,+nBAgB1B,MAAMzK,EAAQnE,SAAS6D,cAAc,SACrCM,EAAM8K,YAAc,4ZAcpBjP,SAASkP,KAAK7K,YAAYF,GAG1B,MAAMgL,EAAejJ,EAAMjG,iBAAiB,iBACtCmP,EAAkBlJ,EAAMvC,cAAc,qBACtC0L,EAAYnJ,EAAMvC,cAAc,wBAChC2L,EAAWpJ,EAAMvC,cAAc,YAC/B4L,EAAcrJ,EAAMvC,cAAc,iBAExCwL,EAAajP,SAASsP,IACpBA,EAAI5M,iBAAiB,SAAS,KAE5BuM,EAAajP,SAAS0K,GAAMA,EAAErI,UAAUnC,OAAO,YAE/CoP,EAAIjN,UAAUkN,IAAI,UAElBL,EAAgBjL,MAAMqE,QAAU,OAAO,GACvC,IAGJ8G,EAAS1M,iBAAiB,SAAS,KACjC,MAAMoI,EAASsE,EAASnG,MAAM6B,OAE9BuE,EAAYN,YAAc,GAAGjE,mBAG7BuE,EAAYhN,UAAUnC,OAAO,aAAc,YACvC4K,GAAU,GACZuE,EAAYhN,UAAUkN,IAAI,YACjBzE,GAAU,IACnBuE,EAAYhN,UAAUkN,IAAI,aAC5B,IAGFJ,EAAUzM,iBAAiB,SAASvC,UAElCgP,EAAUK,UAAW,EACrBL,EAAUhJ,UAAY,kFAMtB,MAAM,UAAEL,SAAoBrF,OAAOC,QAAQqF,MAAMnF,IAAI,CAAC,cAMtD,GALAxB,QAAQC,IACN,uBACAyG,EAAY,eAAiB,mBAG1BA,EAGH,OAFA1G,QAAQG,MAAM,4BACd4P,EAAUhJ,UAAY,wBAKxB,MAAM+C,EAAe/K,EAAU2H,GACzBqD,EAASD,GAAc5J,UAAY,KACzCF,QAAQC,IAAI,gCAAiC8J,GAE7C,MAAM8F,EAAejJ,EAAMjG,iBAAiB,iBACtCmP,EAAkBlJ,EAAMvC,cAAc,YACtCiL,EAAYO,EAAa,GAAGxN,QAAQiN,UACpCe,EAAmBjF,MAAMC,KAAKwE,GACjCS,MAAMJ,GAAQA,EAAIjN,UAAUC,SAAS,aACpCF,aAAa,cACXuN,EAAUT,GAAiBjG,OAAO2G,QAAU,GAElD,GAAKH,EAAL,CAKArQ,QAAQC,IAAI,iCAAkC,CAC5CqP,YACAmB,aAAcJ,EACdE,UACAxG,WAGF,IAEE1I,OAAOI,QAAQgH,YACb,CACEC,OAAQ,iBACRgI,aAAc,CACZpB,YACAmB,aAAcJ,EACdE,UACAxG,UAEF6B,OAAQxE,OAAOyE,SAASD,SAEzBjD,IACC3I,QAAQC,IAAI,gCAAiC0I,GAC7C,MAAMgI,EACJ/J,EAAMvC,cAAc,qBAGtB,GAFAsM,EAAgB9L,MAAM+L,UAAY,IAE9BjI,EAASC,QAAS,CACpB,IAAIiI,EAAWC,EAAO/E,EAEtB,OAAQpD,EAASoI,KAAKhF,SACpB,IAAK,4BACH8E,EAAY,UACZC,EAAQ,oBACR/E,EACE,kDACF,MACF,IAAK,gCACH8E,EAAY,UACZC,EAAQ,mBACR/E,EAAU,8CACV,MAEF,QACE8E,EAAY,UACZC,EAAQ,aACR/E,EAAU,2CAId4E,EAAgB5J,UAAY,gTAIuC8J,oFACzBA,gMAGOA,MAAcC,+DAC3B/E,qDAGtC,KAAO,CAELgE,EAAUK,UAAW,EACrBL,EAAUhJ,UAAY,kBAEtB,MAAMiK,EAAWtQ,SAAS6D,cAAc,KACxCyM,EAASxM,UAAY,iBACrBwM,EAASrB,YAAc,UACrBhH,EAASxI,OAAS,8BAEpB4P,EAAUkB,WAAWC,aACnBF,EACAjB,EAAUoB,YAEd,IAGN,CAAE,MAAOhR,GACPH,QAAQG,MAAM,gCAAiCA,GAC/C4P,EAAUK,UAAW,EACrBL,EAAUhJ,UAAY,kBAEtB,MAAMiK,EAAWtQ,SAAS6D,cAAc,KACxCyM,EAASxM,UAAY,iBACrBwM,EAASrB,YAAc,mCACvBI,EAAUkB,WAAWC,aAAaF,EAAUjB,EAAUoB,YACxD,CAzFA,MAFEnR,QAAQG,MAAM,uBA2FhB,IAGFH,QAAQC,IAAI,oBAAqB,CAC/B4P,aAAcjJ,EAAMjG,iBAAiB,iBACrCoP,UAAWnJ,EAAMvC,cAAc,wBAC/ByL,gBAAiBlJ,EAAMvC,cAAc,cAGvC2L,EAAS1M,iBAAiB,SAAS,KACjC,MAAMoI,EAASsE,EAASnG,MAAM6B,OAE9BuE,EAAYN,YAAc,GAAGjE,mBAG7BuE,EAAYhN,UAAUnC,OAAO,aAAc,YACvC4K,GAAU,GACZuE,EAAYhN,UAAUkN,IAAI,YACjBzE,GAAU,IACnBuE,EAAYhN,UAAUkN,IAAI,aAC5B,IAIF,MAAMiB,EAAkBxK,EAAMvC,cAAc,qBACtCgN,EAAmBzK,EAAMvC,cAAc,sBAE7C+M,EAAgB9N,iBAAiB,SAAS,KACxC,MAAMgO,EAA4C,UAAnCD,EAAiBxM,MAAMqE,QACtCmI,EAAiBxM,MAAMqE,QAAUoI,EAAS,OAAS,QAEnDF,EAAgB/M,cAAc,QAAQsL,YAAc2B,EAChD,wBACA,uBAAuB,IAG7B,MAAMC,EAAgB3K,EAAMvC,cAAc,0BACtCkN,IACFA,EAAcjO,iBAAiB,aAAc2B,IAC3C,MAAMuM,EAAUD,EACVE,EAAIxM,EAAEyM,QAAU,GAChBC,EAAI1M,EAAE2M,QAAU,GAEtBJ,EAAQ3M,MAAMgN,YAAY,cAAe,GAAGJ,OAC5CD,EAAQ3M,MAAMgN,YAAY,cAAe,GAAGF,MAAM,IAGpDJ,EAAcjO,iBAAiB,cAAc,KAC3CiO,EAAc1M,MAAMgN,YAAY,uBAAwB,UACxDN,EAAc1M,MAAMgN,YAAY,oBAAqB,IAAI,IAG/D,MACEjL,EAAMG,UAAY,iNAOtB,CAGAH,EAAME,aAAa,kBAAmBpC,GAGtC,MAAMoN,EAASlL,EAAMvC,cAAc,YAC/ByN,GACFA,EAAOxO,iBAAiB,SAAS,KAC/BsD,EAAM9F,QAAQ,GAGpB,CA0FA,SAASsL,EAAYL,EAASyB,GAC5B,MAAMuE,EAAarR,SAAS6D,cAAc,OAC1CwN,EAAWpC,YAAc5D,EACzBgG,EAAWlN,MAAMqD,SAAW,QAC5B6J,EAAWlN,MAAMgI,OAAS,OAC1BkF,EAAWlN,MAAM0C,MAAQ,OACzBwK,EAAWlN,MAAMmN,QAAU,YAC3BD,EAAWlN,MAAMoN,aAAe,MAChCF,EAAWlN,MAAMqN,MAAQ,OACzBH,EAAWlN,MAAMsN,OAAS,QAC1BJ,EAAWlN,MAAMuN,UAAY,+BAC7BL,EAAWlN,MAAMyH,QAAU,IAC3ByF,EAAWlN,MAAMwN,WAAa,2BAG5BN,EAAWlN,MAAM4E,gBADN,YAAT+D,EACiC,UACjB,UAATA,EAC0B,UAEA,OAGrC9M,SAASiC,KAAKoC,YAAYgN,GAErBA,EAAWtK,YAEhBsK,EAAWlN,MAAMyH,QAAU,IAE3BxN,YAAW,KACTiT,EAAWlN,MAAMyH,QAAU,IAC3ByF,EAAWzO,iBAAiB,iBAAiB,KAC3CyO,EAAWjR,QAAQ,GACnB,GACD,IACL,CAGA,MAAMwR,EAAsC9T,EAC1CoD,EACA,KAIF,SAAS2Q,EAAiBC,GACxB,IAAK,MAAMjF,KAAYiF,EACrB,IAAsB,cAAlBjF,EAASC,MAA0C,eAAlBD,EAASC,QAE1CD,EAASkF,WAAW/G,OAAS,GACV,eAAlB6B,EAASC,MAAoD,QAA3BD,EAASE,eAC5C,CACA5O,aAAa6T,GACbA,EAAgB5T,YAAW,KACzB8C,GAA4B,GAC3B+Q,GACH,KACF,CAGN,CA+CA,SAASC,IACQlS,SAASC,iBACtB,qCAEKC,SAAQ,CAACgC,EAAKC,IAAUQ,EAAaT,EAAKC,IACnD,CA0CA9B,eAAe8R,UACe7R,KAE1BY,GAEJ,CAGAb,eAAe+R,IACb,IAAKzR,OAAOI,UAAYJ,OAAOI,QAAQsR,GACrC,OAGF,MAAMC,EAAW5L,OAAOyE,SAASmH,SACMxS,EAAnCwS,EAAS1M,SAAS,gBAA+B,WAC5C0M,EAAS1M,SAAS,gBAA+B,WACjD0M,EAAS1M,SAAS,gBAAkB0M,EAAS1M,SAAS,SAC/C,UACP0M,EAAS1M,SAAS,iBAAgC,YAClD0M,EAAS1M,SAAS,cAA6B,SACrC,KAEf9F,UAC0BQ,KAE1BV,GAAmB,EACnBC,GAAc,EACdsS,IArHJzS,EAAe,IAAIiN,kBAAkBC,IACnCA,EAAU1M,SAAS2M,IACK,cAAlBA,EAASC,MACXD,EAASkF,WAAW7R,SAASmB,IACvBA,EAAKC,WAAaC,KAAKC,cACVH,EAAKpB,iBAClB,qCAEKC,SAAQ,CAACgC,EAAKC,IAAUQ,EAAaT,EAAKC,IACnD,GAEJ,GACA,IAGJzC,EAAa2D,QAAQrD,SAASiC,KAAM,CAAEsQ,WAAW,EAAMC,SAAS,IAEhEC,YAAYP,EAAmB,KAE/BxL,OAAO9D,iBACL,SACA9E,GAAS,KACPoD,GAA4B,GAC3B,MAGLvB,EAAW,IAAIgN,iBAAiBkF,GAChClS,EAAS0D,QAAQrD,SAASiC,KAAM,CAAEsQ,WAAW,EAAMC,SAAS,MAoG5D5S,GAAmB,EACnBC,GAAc,EACdE,IAjGIL,GACFA,EAAa8L,aAEX7L,GACFA,EAAS6L,aAGX9E,OAAOoB,oBAAoB,SAAU8J,IAoFvC,CApCAa,aANA,WACO9R,OAAOI,QAAQsR,IAClBlH,SAASuH,QAEb,GAEoC,KA4EpC/R,OAAOI,QAAQ4R,UAAUC,aAAY,CAACC,EAASC,EAAQC,KAWrD,MAVuB,oBAAnBF,EAAQ7K,UAaUgL,EAVLH,EAAQG,SAcb/R,gBACVrB,EAAmBoT,EAAQ/R,cAAcgS,UAG3Cb,IAjBEW,EAAa,CAAE7K,SAAS,KAEH,mBAAnB2K,EAAQ7K,SApCgBkL,EAqCLL,EAAQK,SApC/BtT,GAA8C,IAA3BsT,EAASjS,cAC5BpB,GAAwC,IAA1BqT,EAASpT,GAElBF,GAAqBC,GAkBTG,SAASC,iBAAiB,kBAClCC,SAASC,IAChBA,EAAQgE,MAAMqE,QAAU,MAAM,IAhB9BtH,KAMelB,SAASC,iBAAiB,kBAClCC,SAASC,IAChBA,EAAQgE,MAAMqE,QAAU,MAAM,IAsB9BuK,EAAa,CAAE9I,OAAQ,uBAElB,EAxCT,IAA8BiJ,EA2CNF,CAHX,IAebZ,IAGA,MAEMjO,EAAQnE,SAAS6D,cAAc,SA2CrC,IAAImO,EA1CJ7N,EAAMkC,UAHW,GAIjBrG,SAASkP,KAAK7K,YAAYF,GA0C1B,MAAM8N,EAAiB,IAQvBvL,OAAO9D,iBAAiB,SAAUyF,IACvBA,EAAM5I,KAAM,IAGvB,MAUMqO,EAAY,CAACqF,EAAOhK,EAAO2H,IAAY,6EAEHA,MAAYqC,gDACnBhK,2BA0CnCxI,OAAOI,QAAQ4R,UAAUC,aAAY,CAACC,EAASC,EAAQC,KAC9B,qBAAnBF,EAAQ7K,SACN6K,EAAQO,iBACV9T,QAAQC,IAAI,2CACZ4S,MAEA7S,QAAQC,IAAI,sCACZQ,KAEJ,GAEH,EArvDD","sources":["webpack://chrome-gmail-poc/./src/social-content.js"],"sourcesContent":["(() => {\n  // At the top of the file, add:\n  // Utility function to debounce frequent function calls\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Add after the debounce function (around line 15)\n  function decodeJWT(token) {\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split(\"\")\n          .map((c) => {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n          })\n          .join(\"\")\n      );\n      const decoded = JSON.parse(jsonPayload);\n      console.log(\"Decoded JWT payload:\", decoded);\n      console.log(\"Extracted userId:\", decoded.username);\n      return decoded;\n    } catch (error) {\n      console.error(\"Error decoding JWT:\", error);\n      return null;\n    }\n  }\n\n  // Global variables\n  let extensionEnabled = false;\n  let siteEnabled = false;\n  let currentSite = null;\n\n  let retryCount = 0;\n  const MAX_RETRIES = 5;\n  const INITIAL_RETRY_DELAY = 1000; // 1 second\n\n  let bodyObserver;\n  let observer;\n\n  // Remove all overlay elements from the page\n  function removeAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => overlay.remove());\n  }\n\n  // Check if image processing should occur based on user settings\n  async function shouldProcessImage() {\n    try {\n      const items = await new Promise((resolve, reject) => {\n        chrome.storage.sync.get(\n          [\n            \"enableOverlay\",\n            \"facebook\",\n            \"twitter\",\n            \"instagram\",\n            \"linkedin\",\n            \"reddit\",\n          ],\n          (items) => {\n            if (chrome.runtime.lastError) {\n              reject(chrome.runtime.lastError);\n            } else {\n              resolve(items);\n            }\n          }\n        );\n      });\n\n      extensionEnabled = items.enableOverlay !== false;\n      siteEnabled = items[currentSite] !== false;\n\n      return extensionEnabled && siteEnabled;\n    } catch (error) {\n      console.error(\"Error in shouldProcessImage:\", error);\n      return false;\n    }\n  }\n\n  // Main function to add or update overlays on images\n  async function addOrUpdateOverlayToImages() {\n    const shouldProcess = await shouldProcessImage();\n    if (!shouldProcess) {\n      removeAllOverlays();\n      return;\n    }\n\n    const allImages = [];\n\n    // Recursive function to traverse DOM and shadow DOM\n    function traverse(node) {\n      if (node.nodeType !== Node.ELEMENT_NODE) return;\n      if (\n        node.tagName.toLowerCase() === \"img\" &&\n        !node.dataset.overlayProcessed\n      ) {\n        allImages.push(node);\n      }\n\n      if (node.shadowRoot) {\n        traverse(node.shadowRoot);\n      }\n\n      node.childNodes.forEach((child) => traverse(child));\n    }\n\n    traverse(document.body);\n\n    // Special handling for Instagram\n    if (currentSite === \"instagram\") {\n      const instagramImages = document.querySelectorAll(\n        'img[srcset], img[src*=\"instagram\"]'\n      );\n      instagramImages.forEach((img) => {\n        if (!img.dataset.overlayProcessed) {\n          allImages.push(img);\n        }\n      });\n    }\n\n    // Special handling for Reddit\n    if (currentSite === \"reddit\") {\n      const redditImages = document.querySelectorAll('img[alt=\"Post image\"]');\n      redditImages.forEach((img) => allImages.push(img));\n    }\n\n    // Process each image\n    allImages.forEach((img, index) => {\n      if (\n        (img.width > 50 && img.height > 50) ||\n        (img.getAttribute(\"width\") > 50 && img.getAttribute(\"height\") > 50) ||\n        img.classList.contains(\"media-lightbox-img\")\n      ) {\n        try {\n          if (img.complete && img.naturalWidth > 0) {\n            processImage(img, index);\n          } else {\n            img.addEventListener(\n              \"load\",\n              () => {\n                processImage(img, index);\n              },\n              { once: true }\n            );\n          }\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n        }\n      } else {\n        img.dataset.overlayProcessed = \"skipped\";\n      }\n    });\n  }\n\n  // Process individual image\n  function processImage(img, index) {\n    if (img.dataset.overlayProcessed === \"true\") {\n      return;\n    }\n\n    // Use Intersection Observer to detect when image is in viewport\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            if (\n              (img.width > 100 && img.height > 100) ||\n              img.tagName.toLowerCase() === \"video\"\n            ) {\n              addOrUpdateOverlayToImage(img, index);\n            }\n            observer.unobserve(img);\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(img);\n\n    img.dataset.overlayProcessed = \"true\";\n\n    // Error handling for image loading\n    img.onerror = function () {\n      // Error handling logic here if needed\n    };\n\n    // Handle successful image load\n    img.onload = function () {\n      if (\n        (img.width > 100 && img.height > 100) ||\n        img.tagName.toLowerCase() === \"video\"\n      ) {\n        addOrUpdateOverlayToImage(img, index);\n      }\n    };\n  }\n\n  // Add or update overlay on an image\n  function addOrUpdateOverlayToImage(img, index) {\n    // Create a unique identifier for this image/overlay pair\n    const uniqueId = `overlay-${index}-${Date.now()}`;\n\n    let overlay = document.querySelector(\n      `.image-overlay[data-for-image=\"${img.src}\"]`\n    );\n\n    if (!overlay) {\n      overlay = document.createElement(\"div\");\n      overlay.className = \"image-overlay\";\n      overlay.dataset.forImage = img.src;\n      overlay.dataset.overlayId = uniqueId;\n\n      // Create an img element for the icon\n      const iconImg = document.createElement(\"img\");\n      iconImg.src = chrome.runtime.getURL(\"icons/realeyes-ai-icon.png\");\n      iconImg.style.cssText = `\n        width: 20px;\n        height: 20px;\n        object-fit: contain;\n        ${currentSite === \"reddit\" ? \"margin-top: 16px;\" : \"\"}\n      `;\n\n      overlay.style.cssText = `\n            position: absolute;\n            width: 30px;\n            height: 30px;\n            background-color: rgba(255, 255, 255, 0.4);\n            border-radius: 50%;\n            cursor: pointer;\n            z-index: 2147483647;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 20px;\n            pointer-events: auto;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n            opacity: 0.5;\n            transition: opacity 0.3s ease, background-color 0.3s ease, display 0.3s ease;\n        `;\n\n      // Replace emoji with the image\n      overlay.appendChild(iconImg);\n\n      overlay.onclick = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Check for any existing popups associated with this overlay\n        const existingPopup = document.querySelector(\n          `.consent-popup[data-overlay-id=\"${overlay.dataset.overlayId}\"]`\n        );\n\n        // If there's an existing popup, remove it and return\n        if (existingPopup) {\n          existingPopup.remove();\n          return;\n        }\n\n        const highestQualityUrl = getHighestQualityImageUrl(img);\n        const uniqueId = overlay.dataset.overlayId;\n\n        try {\n          const { authToken } = await chrome.storage.local.get([\"authToken\"]);\n\n          if (!authToken) {\n            // Remove any existing popups\n            const existingPopups = document.querySelectorAll(\".consent-popup\");\n            existingPopups.forEach((popup) => popup.remove());\n\n            const authPopup = document.createElement(\"div\");\n            authPopup.className = \"consent-popup\";\n            authPopup.setAttribute(\n              \"data-overlay-id\",\n              overlay.dataset.overlayId\n            ); // Add overlay ID to auth popup\n            authPopup.innerHTML = `\n              <div class=\"close-x\">×</div>\n              <p class=\"consent-message\">Please log in to analyze images</p>\n              <div class=\"consent-buttons\">\n                <button class=\"confirm-btn\">Log In</button>\n                <button class=\"cancel-btn\">Cancel</button>\n              </div>\n              <div style=\"color: #666; font-size: 12px; margin-top: 10px; text-align: center;\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style=\"vertical-align: middle; margin-right: 5px;\">\n                  <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\" fill=\"currentColor\"/>\n                </svg>\n                Or click the RealEyes icon in your browser toolbar\n              </div>\n            `;\n\n            document.body.appendChild(authPopup);\n\n            // Position the popup relative to the overlay icon\n            const updatePopupPosition = () => {\n              const overlayRect = overlay.getBoundingClientRect();\n              const scrollY = window.scrollY || window.pageYOffset;\n\n              // Calculate position relative to the overlay icon\n              let left = overlayRect.right + 10;\n              let top = overlayRect.top + scrollY;\n\n              // If popup would go off-screen to the right, position it to the left\n              if (left + authPopup.offsetWidth > window.innerWidth - 10) {\n                left = overlayRect.left - authPopup.offsetWidth - 10;\n              }\n\n              // Ensure popup stays within viewport bounds vertically\n              const maxTop =\n                document.documentElement.scrollHeight -\n                authPopup.offsetHeight -\n                10;\n              top = Math.max(10, Math.min(top, maxTop));\n\n              authPopup.style.position = \"absolute\";\n              authPopup.style.left = `${left}px`;\n              authPopup.style.top = `${top}px`;\n            };\n\n            // Initial positioning\n            setTimeout(updatePopupPosition, 0);\n\n            // Update position on window resize and scroll\n            const debouncedUpdate = debounce(updatePopupPosition, 100);\n            window.addEventListener(\"resize\", debouncedUpdate);\n            window.addEventListener(\"scroll\", debouncedUpdate);\n\n            // Add click handlers\n            const closeButton = authPopup.querySelector(\".close-x\");\n            const loginButton = authPopup.querySelector(\".confirm-btn\");\n            const cancelButton = authPopup.querySelector(\".cancel-btn\");\n\n            const cleanup = () => {\n              window.removeEventListener(\"resize\", debouncedUpdate);\n              window.removeEventListener(\"scroll\", debouncedUpdate);\n              authPopup.remove();\n            };\n\n            // Close handlers\n            closeButton.addEventListener(\"click\", cleanup);\n            loginButton.addEventListener(\"click\", () => {\n              // Send message to background script to open new tab\n              chrome.runtime.sendMessage(\n                { action: \"initiateLogin\" },\n                (response) => {\n                  if (chrome.runtime.lastError || !response?.success) {\n                    // Fallback to direct window.open if message fails\n                    window.open(\"https://realeyes.ai/upload-image\", \"_blank\");\n                  }\n                }\n              );\n              authPopup.remove();\n            });\n\n            // Cancel handler\n            cancelButton.addEventListener(\"click\", () => {\n              authPopup.remove();\n            });\n\n            // Close when clicking outside\n            document.addEventListener(\"click\", function closePopup(event) {\n              if (\n                !authPopup.contains(event.target) &&\n                !overlay.contains(event.target)\n              ) {\n                cleanup();\n                document.removeEventListener(\"click\", closePopup);\n              }\n            });\n\n            // Create an Intersection Observer for the overlay\n            const observer = new IntersectionObserver(\n              (entries) => {\n                entries.forEach((entry) => {\n                  if (!entry.isIntersecting) {\n                    cleanup();\n                  }\n                });\n              },\n              { threshold: 0.1 }\n            );\n\n            observer.observe(overlay);\n\n            return;\n          }\n\n          // If we have a valid token, proceed with existing logic\n          if (highestQualityUrl) {\n            showConsentPopup(overlay, highestQualityUrl, uniqueId);\n          } else {\n            showMessage(\"No suitable image found.\", \"error\");\n          }\n        } catch (error) {\n          console.error(\"Authentication check failed:\", error);\n          showMessage(\"An error occurred. Please try again.\", \"error\");\n        }\n      };\n      img.parentElement.appendChild(overlay);\n\n      overlay.addEventListener(\"mouseenter\", () => {\n        overlay.style.opacity = \"1\";\n        overlay.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n      });\n\n      overlay.addEventListener(\"mouseleave\", () => {\n        overlay.style.opacity = \"0.5\";\n        overlay.style.backgroundColor = \"rgba(255, 255, 255, 0.4)\";\n      });\n    }\n\n    const updateOverlayPosition = debounce(() => {\n      const rect = img.getBoundingClientRect();\n      const viewportHeight = window.innerHeight;\n      const viewportWidth = window.innerWidth;\n\n      const isPartiallyVisible =\n        rect.top < viewportHeight &&\n        rect.bottom > 0 &&\n        rect.left < viewportWidth &&\n        rect.right > 0;\n\n      const isSlideshow = img.closest(\".media-lightbox-img\") !== null;\n      const isVideo =\n        img.tagName.toLowerCase() === \"video\" || img.querySelector(\"video\");\n\n      if (\n        isPartiallyVisible &&\n        ((rect.width > 100 && rect.height > 100) || isVideo) &&\n        (!isSlideshow || img.offsetParent !== null)\n      ) {\n        overlay.style.display = \"flex\";\n        const top = 10;\n        const right = 10;\n        overlay.style.top = `${top}px`;\n        overlay.style.right = `${right}px`;\n        overlay.style.bottom = \"auto\";\n        overlay.style.left = \"auto\";\n      } else if (isVideo) {\n        overlay.style.display = \"flex\";\n        overlay.style.top = \"10px\";\n        overlay.style.right = \"10px\";\n        overlay.style.bottom = \"auto\";\n        overlay.style.left = \"auto\";\n      } else {\n        setTimeout(() => {\n          if (!isPartiallyVisible) {\n            overlay.style.display = \"none\";\n          }\n        }, 300); // 300ms delay before hiding\n      }\n    }, 100); // 100ms debounce\n\n    updateOverlayPosition();\n\n    if (!img.dataset.overlayEventListenersAdded) {\n      const scrollHandler = () => {\n        updateOverlayPosition();\n      };\n      const resizeHandler = () => {\n        updateOverlayPosition();\n      };\n      window.addEventListener(\"scroll\", scrollHandler, { passive: true });\n      window.addEventListener(\"resize\", resizeHandler, { passive: true });\n      img.dataset.overlayEventListenersAdded = \"true\";\n    }\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === \"attributes\" &&\n          (mutation.attributeName === \"src\" ||\n            mutation.attributeName === \"style\")\n        ) {\n          overlay.dataset.forImage = img.src;\n          updateOverlayPosition();\n        }\n      });\n    });\n\n    observer.observe(img, {\n      attributes: true,\n      attributeFilter: [\"src\", \"style\"],\n    });\n  }\n\n  // Show consent popup before sending image for analysis\n  function showConsentPopup(target, imageUrl, overlayId) {\n    // Check for existing popup using both image URL and overlay ID\n    let existingPopup = document.querySelector(\n      `.consent-popup[data-for-image=\"${imageUrl}\"]`\n    );\n\n    if (!existingPopup) {\n      existingPopup = document.querySelector(\n        `.consent-popup[data-overlay-id=\"${overlayId}\"]`\n      );\n    }\n\n    if (existingPopup) {\n      return existingPopup;\n    }\n\n    // Remove any other popups\n    const existingPopups = document.querySelectorAll(\".consent-popup\");\n    existingPopups.forEach((popup) => popup.remove());\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"consent-popup\";\n    popup.setAttribute(\"data-for-image\", imageUrl);\n    popup.setAttribute(\"data-overlay-id\", overlayId); // Add overlay ID to popup\n\n    // Add popup content\n    popup.innerHTML = `\n        <p class=\"consent-message\">Analyze this image?</p>\n        <div class=\"consent-buttons\">\n            <button class=\"confirm-btn\">Analyze Now</button>\n            <button class=\"cancel-btn\">Skip</button>\n        </div>\n        <div class=\"consent-options\">\n            <label class=\"store-data-option\">\n                <input type=\"checkbox\" class=\"store-data-checkbox\" id=\"storeImageData\" checked>\n                <span>Help us improve detection by storing this image</span>\n            </label>\n        </div>\n    `;\n\n    document.body.appendChild(popup);\n\n    // Create an Intersection Observer for the target (overlay icon)\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            // Show popup when target is visible\n            popup.style.display = \"flex\";\n            updatePopupPosition();\n          } else {\n            // Hide popup when target is not visible\n            popup.style.display = \"none\";\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(target);\n\n    // Position the popup relative to the icon overlay\n    const updatePopupPosition = () => {\n      if (popup.style.display === \"none\") return;\n\n      const overlayRect = target.getBoundingClientRect();\n      const scrollY = window.scrollY || window.pageYOffset;\n\n      // Calculate position relative to the overlay icon\n      let left = overlayRect.right + 10;\n      let top = overlayRect.top + scrollY; // Add scroll offset back\n\n      // If popup would go off-screen to the right, position it to the left\n      if (left + popup.offsetWidth > window.innerWidth - 10) {\n        left = overlayRect.left - popup.offsetWidth - 10;\n      }\n\n      // Ensure popup stays within viewport bounds vertically\n      const maxTop =\n        document.documentElement.scrollHeight - popup.offsetHeight - 10;\n      top = Math.max(10, Math.min(top, maxTop));\n\n      popup.style.position = \"absolute\"; // Change back to absolute\n      popup.style.left = `${left}px`;\n      popup.style.top = `${top}px`;\n    };\n\n    // Add scroll event listener to hide popup when image is out of view\n    const visibilityObserver = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) {\n            popup.style.display = \"none\";\n          }\n        });\n      },\n      { threshold: 0 }\n    );\n\n    visibilityObserver.observe(target);\n\n    // Initial positioning\n    setTimeout(updatePopupPosition, 0);\n\n    // Update position on window resize and scroll\n    const debouncedUpdate = debounce(updatePopupPosition, 100);\n    window.addEventListener(\"resize\", debouncedUpdate);\n    window.addEventListener(\"scroll\", debouncedUpdate);\n\n    // Enhanced cleanup function\n    const cleanup = () => {\n      window.removeEventListener(\"resize\", debouncedUpdate);\n      window.removeEventListener(\"scroll\", debouncedUpdate);\n      observer.disconnect();\n      popup.remove();\n    };\n\n    // Update the confirm button click handler\n    popup\n      .querySelector(\".confirm-btn\")\n      ?.addEventListener(\"click\", async (e) => {\n        e.preventDefault();\n\n        const storeDataCheckbox = popup.querySelector(\"#storeImageData\");\n        const storeData = storeDataCheckbox ? storeDataCheckbox.checked : false;\n\n        // Remove ALL existing content from popup\n        popup.innerHTML = `\n        <div class=\"loading-indicator\">\n            <div class=\"spinner\"></div>\n            <span>Analyzing...</span>\n        </div>\n      `;\n\n        // Send image for analysis using the existing popup\n        await sendImageForAnalysis(imageUrl, popup, storeData);\n      });\n\n    // Only add cleanup to cancel button\n    popup.querySelector(\".cancel-btn\")?.addEventListener(\"click\", cleanup);\n\n    return popup;\n  }\n  // Send image data for analysis\n  function sendImageForAnalysis(url, popup, storeData) {\n    let filename = url.split(\"/\").pop().split(\"?\")[0];\n    let mimeType = \"image/jpeg\"; // Default to JPEG for Twitter images\n\n    // Get auth token first\n    chrome.storage.local.get([\"authToken\"], async function (result) {\n      const authToken = result.authToken;\n\n      if (!authToken) {\n        popup.innerHTML = `\n          <div class=\"error-container\" style=\"text-align: center; padding: 15px;\">\n            <div class=\"close-x\">×</div>\n            <p style=\"margin: 0 0 15px;\">Please log in to use the extension.</p>\n            <button id=\"loginButton\" style=\"\n              width: 100%;\n              padding: 10px;\n              margin: 0 auto;\n              display: block;\n              background-color: #2196f3;\n              color: white;\n              border: none;\n              border-radius: 4px;\n              cursor: pointer;\n              transition: background-color 0.3s;\n              font-size: 14px;\n            \">Log In</button>\n          </div>\n        `;\n\n        // Add hover effect and click handler for the login button\n        const loginButton = popup.querySelector(\"#loginButton\");\n        loginButton.addEventListener(\"mouseover\", () => {\n          loginButton.style.backgroundColor = \"#0d8bf2\";\n        });\n        loginButton.addEventListener(\"mouseout\", () => {\n          loginButton.style.backgroundColor = \"#2196f3\";\n        });\n        loginButton.addEventListener(\"click\", () => {\n          // Check for existing cookie first\n          chrome.cookies.get(\n            {\n              url: \"https://realeyes.ai\",\n              name: \"opp_access_token\",\n            },\n            function (cookie) {\n              if (cookie && cookie.value) {\n                // If cookie exists, validate and store it\n                chrome.storage.local.set(\n                  { authToken: cookie.value },\n                  function () {\n                    // Refresh the popup content since we now have a valid token\n                    popup.remove();\n                    addOrUpdateOverlayToImages(); // Refresh overlays with new auth state\n                  }\n                );\n              } else {\n                // No valid cookie found, redirect to login\n                window.open(\"https://realeyes.ai/upload-image\", \"_blank\");\n                popup.remove();\n              }\n            }\n          );\n        });\n\n        return;\n      }\n\n      // Decode JWT and get userId\n      const decodedToken = decodeJWT(authToken);\n      const userId = decodedToken?.username || null;\n\n      if (url.includes(\"twimg.com\")) {\n        // For Twitter images, extract format from URL\n        const format = new URL(url).searchParams.get(\"format\");\n        if (format) {\n          filename += `.${format}`;\n          mimeType = `image/${format}`;\n        }\n      } else {\n        mimeType = getMimeType(filename);\n      }\n\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          return response.arrayBuffer();\n        })\n        .then((arrayBuffer) => {\n          const uint8Array = new Uint8Array(arrayBuffer);\n          return crypto.subtle\n            .digest(\"SHA-256\", uint8Array)\n            .then((hashBuffer) => {\n              const hashArray = Array.from(new Uint8Array(hashBuffer));\n              const hashHex = hashArray\n                .map((b) => b.toString(16).padStart(2, \"0\"))\n                .join(\"\");\n              return { uint8Array, hashHex };\n            });\n        })\n        .then(({ uint8Array, hashHex }) => {\n          chrome.runtime.sendMessage(\n            {\n              action: \"sendImage\",\n              imageData: {\n                url,\n                mimeType,\n                filename,\n                size: uint8Array.length,\n                sha256Hash: hashHex,\n                origin: window.location.origin,\n                storeData: storeData,\n                userId: userId, // Add userId to the request\n              },\n            },\n            (response) => {\n              if (chrome.runtime.lastError) {\n                displayAnalysisResults(\n                  popup,\n                  \"Error: \" + chrome.runtime.lastError.message,\n                  \"error\"\n                );\n              } else if (response.error === \"Authentication required\") {\n                displayAnalysisResults(\n                  popup,\n                  \"Authentication required. Please log in and try again.\",\n                  \"error\"\n                );\n              } else {\n                displayAnalysisResults(popup, response, \"success\");\n              }\n            }\n          );\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n          displayAnalysisResults(popup, \"Error: \" + error.message, \"error\");\n        });\n    });\n  }\n\n  // Simplify displayAnalysisResults since UI cleanup is handled earlier\n  function displayAnalysisResults(popup, results, status) {\n    const overlayId = popup.getAttribute(\"data-overlay-id\");\n    popup.innerHTML = \"\";\n\n    if (status === \"error\") {\n      popup.innerHTML = `\n            <div class=\"error-container\">\n                <div class=\"close-x\">×</div>\n                <p class=\"error\">${results}</p>\n            </div>\n        `;\n    } else {\n      // Get the analysis results, handling potential null/undefined values\n      const standardAnalysis = results.sageMakerAnalysis || { probability: 0 };\n      const ufdAnalysis = results.sageMakerAnalysisUFD || { probability: 0 };\n\n      // Determine which model to use based on available results\n      const analysis =\n        standardAnalysis.probability > ufdAnalysis.probability\n          ? standardAnalysis\n          : ufdAnalysis;\n\n      if (analysis) {\n        const probability = (analysis.probability * 100).toFixed(1);\n\n        // Determine color and text based on probability\n        let confidenceColor;\n        let titleText;\n        if (probability < 33) {\n          confidenceColor = \"#28a745\";\n          titleText = \"This content is likely real.\";\n        } else if (probability < 66) {\n          confidenceColor = \"#ffc107\";\n          titleText = \"This content is uncertain—proceed with caution.\";\n        } else {\n          confidenceColor = \"#dc3545\";\n          titleText = \"This content is likely a deepfake.\";\n        }\n\n        popup.innerHTML = `\n                <div class=\"close-x\">×</div>\n                <div class=\"analysis-title\" style=\"color: ${confidenceColor}\">${titleText}</div>\n\n                <div class=\"probability-circle\">\n                    <svg width=\"150\" height=\"150\" viewBox=\"0 0 150 150\">\n                        <circle\n                            cx=\"75\"\n                            cy=\"75\"\n                            r=\"70\"\n                            stroke=\"#E6E6E6\"\n                            stroke-width=\"10\"\n                            fill=\"none\"\n                        />\n                        <circle\n                            cx=\"75\"\n                            cy=\"75\"\n                            r=\"70\"\n                            stroke=\"${confidenceColor}\"\n                            stroke-width=\"10\"\n                            fill=\"none\"\n                            stroke-linecap=\"round\"\n                            stroke-dasharray=\"439.82\"\n                            stroke-dashoffset=\"${\n                              439.82 * (1 - probability / 100)\n                            }\"\n                            transform=\"rotate(-90 75 75)\"\n                            style=\"transition: stroke-dashoffset 1s\"\n                        />\n                    </svg>\n                    <div class=\"probability-text\">\n                        <div class=\"probability-value\" style=\"color: ${confidenceColor}\">${probability}%</div>\n                        <div class=\"probability-label\" style=\"\n                            font-size: 12px;\n                            color: #333;\n                            margin-top: 10px;\n                        \">Deepfake Probability</div>\n                    </div>\n                </div>\n\n                <div class=\"confidence-indicators\">\n                    <div class=\"indicator real\">\n                        <div class=\"indicator-dot\"></div>\n                        <div class=\"indicator-label\">Likely Real</div>\n                    </div>\n                    <div class=\"indicator uncertain\">\n                        <div class=\"indicator-dot\"></div>\n                        <div class=\"indicator-label\" style=\"white-space: nowrap;\">Uncertain</div>\n                    </div>\n                    <div class=\"indicator fake\">\n                        <div class=\"indicator-dot\"></div>\n                        <div class=\"indicator-label\">Likely Deepfake</div>\n                    </div>\n                </div>\n\n                <div class=\"request-count\" data-tooltip=\"${\n                  results.requestCount === 1\n                    ? \"The analysis results were determined in near-real-time\"\n                    : \"Displaying cached analysis results\"\n                }\">\n                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM12 20C7.6 20 4 16.4 4 12C4 7.6 7.6 4 12 4C16.4 4 20 7.6 20 12C20 16.4 16.4 20 12 20Z\" fill=\"#666\"/>\n                        <path d=\"M12.5 7H11V13L16.2 16.2L17 14.9L12.5 12.2V7Z\" fill=\"#666\"/>\n                    </svg>\n                    ${\n                      results.requestCount === 1\n                        ? \"You're the first to analyze this image\"\n                        : `Image analyzed ${results.requestCount} time${\n                            results.requestCount !== 1 ? \"s\" : \"\"\n                          }`\n                    }\n                </div>\n\n                <div class=\"analysis-details-accordion\">\n                    <button class=\"accordion-button\">\n                        <span>View Analysis Details</span>\n                    </button>\n                    \n                    <div class=\"accordion-content\">\n                        <div class=\"details-section\">\n                            <div class=\"model-comparison\">\n                                <div class=\"model-result ${\n                                  standardAnalysis.probability >\n                                  ufdAnalysis.probability\n                                    ? \"selected\"\n                                    : \"\"\n                                }\">\n                                    <h4 style=\"font-size: 12px;\">DMImageDetection</h4>\n                                    <div class=\"model-probability\">\n                                        ${\n                                          standardAnalysis.probability !==\n                                          undefined\n                                            ? `${(\n                                                standardAnalysis.probability *\n                                                100\n                                              ).toFixed(1)}%`\n                                            : \"No result\"\n                                        }\n                                    </div>\n                                </div>\n                                <div class=\"model-result ${\n                                  ufdAnalysis.probability >\n                                  standardAnalysis.probability\n                                    ? \"selected\"\n                                    : \"\"\n                                }\">\n                                    <h4 style=\"font-size: 12px;\">UniversalFakeDetect</h4>\n                                    <div class=\"model-probability\">\n                                        ${\n                                          ufdAnalysis.probability !== undefined\n                                            ? `${(\n                                                ufdAnalysis.probability * 100\n                                              ).toFixed(1)}%`\n                                            : \"No result\"\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <a href=\"https://realeyes.ai/transparency\" \n                               class=\"model-info-link\" \n                               target=\"_blank\"\n                               rel=\"noopener noreferrer\">\n                               Learn more about the detection models →\n                            </a>\n                            \n                            <div class=\"details-grid\">\n                                ${detailRow(\n                                  \"File Name\",\n                                  results.originalFileName,\n                                  \"Original filename of the uploaded image\"\n                                )}\n                                ${detailRow(\n                                  \"File Size\",\n                                  `${(results.fileSize / 1024).toFixed(2)} KB`,\n                                  \"Size of the image file in kilobytes\"\n                                )}\n                                ${detailRow(\n                                  \"Dimensions\",\n                                  `${results.metadata.sharp.width}x${results.metadata.sharp.height}`,\n                                  \"Width & height of the image in pixels\"\n                                )}\n                                ${detailRow(\n                                  \"Format\",\n                                  results.metadata.sharp.format.toUpperCase(),\n                                  \"Image file format\"\n                                )}\n                                ${detailRow(\n                                  \"Color Space\",\n                                  results.metadata.sharp.space.toUpperCase(),\n                                  \"Color space used by the image (sRGB, CMYK, etc.)\"\n                                )}\n                                ${detailRow(\n                                  \"Channels\",\n                                  results.metadata.sharp.channels,\n                                  \"Number of color channels in the image\"\n                                )}\n                                ${detailRow(\n                                  \"Bit Depth\",\n                                  results.metadata.sharp.depth,\n                                  \"Number of bits used per color channel. Higher values (e.g., 8-bit, 16-bit) mean more possible colors and smoother gradients\"\n                                )}\n                                ${detailRow(\n                                  \"Resolution\",\n                                  `${results.metadata.sharp.density} DPI`,\n                                  \"Image resolution in dots per inch (DPI)\"\n                                )}\n                                ${detailRow(\n                                  \"Chroma Subsampling\",\n                                  results.metadata.sharp.chromaSubsampling,\n                                  \"Type of chroma subsampling used for color compression\"\n                                )}\n                                ${detailRow(\n                                  \"Progressive Loading\",\n                                  results.metadata.sharp.isProgressive\n                                    ? \"Yes\"\n                                    : \"No\",\n                                  \"A technique where the image loads gradually, starting with a low-quality version that becomes clearer over time. Improves perceived loading speed on slower connections\"\n                                )}\n                                ${detailRow(\n                                  \"Has Alpha Channel\",\n                                  results.metadata.sharp.hasAlpha\n                                    ? \"Yes\"\n                                    : \"No\",\n                                  \"Whether the image contains transparency\"\n                                )}\n                                ${detailRow(\n                                  \"Color Profile\",\n                                  results.metadata.sharp.hasProfile\n                                    ? \"Yes\"\n                                    : \"No\",\n                                  \"A set of data that defines how colors should be displayed. Helps ensure consistent color appearance across different devices and screens\"\n                                )}\n                                ${detailRow(\n                                  \"Image Hash\",\n                                  results.imageHash,\n                                  \"A unique digital fingerprint of the image. It can be used to identify identical copies of this image, even if renamed\"\n                                )}\n                                ${detailRow(\n                                  \"Perceptual Hash\",\n                                  results.pHash,\n                                  \"A special type of image fingerprint that can identify visually similar images, even if they've been slightly modified, resized, or compressed\"\n                                )}\n                                ${detailRow(\n                                  \"Upload Date\",\n                                  new Date(results.uploadDate).toLocaleString(),\n                                  \"When the image was uploaded for analysis\"\n                                )}\n                                ${detailRow(\n                                  \"Origin Website\",\n                                  results.originWebsites?.[0] || \"Unknown\",\n                                  \"Website where the image originated\"\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"feedback-section\">\n                    <p>Was this analysis helpful?</p>\n                    <div class=\"feedback-buttons\">\n                        <button class=\"feedback-btn thumbs-up\" data-image-hash=\"${\n                          results.imageHash\n                        }\" data-value=\"up\">\n                            <span>👍</span>\n                        </button>\n                        <button class=\"feedback-btn thumbs-down\" data-image-hash=\"${\n                          results.imageHash\n                        }\" data-value=\"down\">\n                            <span>👎</span>\n                        </button>\n                    </div>\n                    <div class=\"feedback-comment\" style=\"display: none;\">\n                        <div class=\"textarea-container\">\n                            <textarea placeholder=\"Tell us why (optional)\" maxlength=\"100\"></textarea>\n                            <div class=\"char-counter\">0/100 characters</div>\n                        </div>\n                        <button class=\"submit-feedback-btn\">Submit Feedback</button>\n                    </div>\n                </div>\n            `;\n\n        // Add CSS for the close-x\n        const style = document.createElement(\"style\");\n        style.textContent = `\n                .close-x {\n                    position: absolute;\n                    top: 5px;\n                    right: 10px;\n                    cursor: pointer;\n                    font-size: 20px;\n                    color: #666;\n                    transition: color 0.2s;\n                }\n                .close-x:hover {\n                    color: #333;\n                }\n            `;\n        document.head.appendChild(style);\n\n        // Add event listeners for feedback buttons\n        const feedbackBtns = popup.querySelectorAll(\".feedback-btn\");\n        const feedbackComment = popup.querySelector(\".feedback-comment\"); // Changed from textarea to container\n        const submitBtn = popup.querySelector(\".submit-feedback-btn\");\n        const textarea = popup.querySelector(\"textarea\");\n        const charCounter = popup.querySelector(\".char-counter\");\n\n        feedbackBtns.forEach((btn) => {\n          btn.addEventListener(\"click\", () => {\n            // Remove active class from all buttons\n            feedbackBtns.forEach((b) => b.classList.remove(\"active\"));\n            // Add active class to clicked button\n            btn.classList.add(\"active\");\n            // Show comment section\n            feedbackComment.style.display = \"block\"; // Changed from textarea to container\n          });\n        });\n\n        textarea.addEventListener(\"input\", () => {\n          const length = textarea.value.length;\n          const remaining = 100 - length;\n          charCounter.textContent = `${length}/100 characters`;\n\n          // Update counter color based on remaining characters\n          charCounter.classList.remove(\"near-limit\", \"at-limit\");\n          if (length >= 90) {\n            charCounter.classList.add(\"at-limit\");\n          } else if (length >= 75) {\n            charCounter.classList.add(\"near-limit\");\n          }\n        });\n\n        submitBtn.addEventListener(\"click\", async () => {\n          // Disable the submit button and show loading state\n          submitBtn.disabled = true;\n          submitBtn.innerHTML = `\n            <span class=\"spinner\"></span>\n            Sending...\n          `;\n\n          // Get auth token from storage\n          const { authToken } = await chrome.storage.local.get([\"authToken\"]);\n          console.log(\n            \"Retrieved authToken:\",\n            authToken ? \"Token exists\" : \"No token found\"\n          );\n\n          if (!authToken) {\n            console.error(\"No auth token found\");\n            submitBtn.innerHTML = \"Error: Please log in\";\n            return;\n          }\n\n          // Decode JWT and get userId\n          const decodedToken = decodeJWT(authToken);\n          const userId = decodedToken?.username || null;\n          console.log(\"Final userId to be submitted:\", userId);\n\n          const feedbackBtns = popup.querySelectorAll(\".feedback-btn\");\n          const feedbackComment = popup.querySelector(\"textarea\");\n          const imageHash = feedbackBtns[0].dataset.imageHash;\n          const selectedFeedback = Array.from(feedbackBtns)\n            .find((btn) => btn.classList.contains(\"active\"))\n            ?.getAttribute(\"data-value\");\n          const comment = feedbackComment?.value?.trim() || \"\";\n\n          if (!selectedFeedback) {\n            console.error(\"No feedback selected\");\n            return;\n          }\n\n          console.log(\"Submitting feedback with data:\", {\n            imageHash,\n            feedbackType: selectedFeedback,\n            comment,\n            userId,\n          });\n\n          try {\n            // Send message to background script\n            chrome.runtime.sendMessage(\n              {\n                action: \"submitFeedback\",\n                feedbackData: {\n                  imageHash,\n                  feedbackType: selectedFeedback,\n                  comment,\n                  userId,\n                },\n                origin: window.location.origin,\n              },\n              (response) => {\n                console.log(\"Feedback submission response:\", response);\n                const feedbackSection =\n                  popup.querySelector(\".feedback-section\");\n                feedbackSection.style.marginTop = \"0\";\n\n                if (response.success) {\n                  let iconColor, title, message;\n\n                  switch (response.data.message) {\n                    case \"Feedback already received\":\n                      iconColor = \"#3498db\"; // Primary blue\n                      title = \"Already Submitted\";\n                      message =\n                        \"You've already provided feedback for this image\";\n                      break;\n                    case \"Feedback updated successfully\":\n                      iconColor = \"#2196F3\"; // Material blue\n                      title = \"Feedback Updated\";\n                      message = \"Your feedback has been updated successfully\";\n                      break;\n                    case \"Feedback submitted successfully\":\n                    default:\n                      iconColor = \"#4CAF50\"; // Green\n                      title = \"Thank you!\";\n                      message = \"Your feedback helps improve our analyses\";\n                      break;\n                  }\n\n                  feedbackSection.innerHTML = `\n                    <div class=\"feedback-success\">\n                        <div class=\"icon-container\">\n                            <svg class=\"status-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n                                <circle cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\" stroke=\"${iconColor}\" stroke-width=\"2\"/>\n                                <path fill=\"none\" stroke=\"${iconColor}\" stroke-width=\"2\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n                            </svg>\n                        </div>\n                        <h3 class=\"feedback-title\" style=\"color: ${iconColor}\">${title}</h3>\n                        <p class=\"feedback-message\">${message}</p>\n                    </div>\n                `;\n                } else {\n                  // Error handling\n                  submitBtn.disabled = false;\n                  submitBtn.innerHTML = \"Submit Feedback\";\n\n                  const errorMsg = document.createElement(\"p\");\n                  errorMsg.className = \"feedback-error\";\n                  errorMsg.textContent = `Error: ${\n                    response.error || \"Failed to submit feedback\"\n                  }`;\n                  submitBtn.parentNode.insertBefore(\n                    errorMsg,\n                    submitBtn.nextSibling\n                  );\n                }\n              }\n            );\n          } catch (error) {\n            console.error(\"Error in feedback submission:\", error);\n            submitBtn.disabled = false;\n            submitBtn.innerHTML = \"Submit Feedback\";\n\n            const errorMsg = document.createElement(\"p\");\n            errorMsg.className = \"feedback-error\";\n            errorMsg.textContent = \"Error: Failed to submit feedback\";\n            submitBtn.parentNode.insertBefore(errorMsg, submitBtn.nextSibling);\n          }\n        });\n\n        console.log(\"Feedback buttons:\", {\n          feedbackBtns: popup.querySelectorAll(\".feedback-btn\"),\n          submitBtn: popup.querySelector(\".submit-feedback-btn\"),\n          feedbackComment: popup.querySelector(\"textarea\"),\n        });\n\n        textarea.addEventListener(\"input\", () => {\n          const length = textarea.value.length;\n          const remaining = 100 - length;\n          charCounter.textContent = `${length}/100 characters`;\n\n          // Update counter color based on remaining characters\n          charCounter.classList.remove(\"near-limit\", \"at-limit\");\n          if (length >= 90) {\n            charCounter.classList.add(\"at-limit\");\n          } else if (length >= 75) {\n            charCounter.classList.add(\"near-limit\");\n          }\n        });\n\n        // Add accordion functionality\n        const accordionButton = popup.querySelector(\".accordion-button\");\n        const accordionContent = popup.querySelector(\".accordion-content\");\n\n        accordionButton.addEventListener(\"click\", () => {\n          const isOpen = accordionContent.style.display === \"block\";\n          accordionContent.style.display = isOpen ? \"none\" : \"block\";\n          // Update button text based on state\n          accordionButton.querySelector(\"span\").textContent = isOpen\n            ? \"View Analysis Details\"\n            : \"Hide Analysis Details\";\n        });\n\n        const selectedModel = popup.querySelector(\".model-result.selected\");\n        if (selectedModel) {\n          selectedModel.addEventListener(\"mousemove\", (e) => {\n            const tooltip = selectedModel;\n            const x = e.clientX + 15; // Offset from cursor X\n            const y = e.clientY + 15; // Offset from cursor Y\n\n            tooltip.style.setProperty(\"--tooltip-x\", `${x}px`);\n            tooltip.style.setProperty(\"--tooltip-y\", `${y}px`);\n          });\n\n          selectedModel.addEventListener(\"mouseleave\", () => {\n            selectedModel.style.setProperty(\"--tooltip-visibility\", \"hidden\");\n            selectedModel.style.setProperty(\"--tooltip-opacity\", \"0\");\n          });\n        }\n      } else {\n        popup.innerHTML = `\n                <div class=\"error-container\">\n                    <div class=\"close-x\">×</div>\n                    <p class=\"error\">No analysis results available</p>\n                </div>\n            `;\n      }\n    }\n\n    // Ensure the overlay ID is maintained\n    popup.setAttribute(\"data-overlay-id\", overlayId);\n\n    // Add click handler for the close X\n    const closeX = popup.querySelector(\".close-x\");\n    if (closeX) {\n      closeX.addEventListener(\"click\", () => {\n        popup.remove();\n      });\n    }\n  }\n\n  // Helper function to get MIME type from filename\n  function getMimeType(filename) {\n    const ext = filename.split(\".\").pop().toLowerCase();\n    const mimeTypes = {\n      jpg: \"image/jpeg\",\n      jpeg: \"image/jpeg\",\n      png: \"image/png\",\n      gif: \"image/gif\",\n      webp: \"image/webp\",\n    };\n    return mimeTypes[ext] || \"application/octet-stream\";\n  }\n\n  // Get the highest quality image URL\n  function getHighestQualityImageUrl(img) {\n    if (currentSite === \"instagram\") {\n      // Try to get the image data from the loaded image\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.naturalWidth;\n      canvas.height = img.naturalHeight;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      try {\n        return canvas.toDataURL(\"image/jpeg\");\n      } catch (e) {\n        console.error(\"Failed to get image data:\", e);\n        // Fall back to the original src if we can't get the data URL\n        return img.src;\n      }\n    }\n\n    const originalSrc = img.src;\n    let highQualityUrl = originalSrc;\n\n    if (currentSite === \"linkedin\") {\n      const isCertificationImage =\n        img.closest(\".feed-shared-celebration-image\") !== null;\n\n      if (isCertificationImage) {\n        return originalSrc;\n      }\n\n      try {\n        const parsedUrl = new URL(originalSrc);\n        const pathname = parsedUrl.pathname;\n\n        // Remove size parameters\n        parsedUrl.searchParams.delete(\"w\");\n        parsedUrl.searchParams.delete(\"h\");\n\n        // Set to highest quality\n        parsedUrl.searchParams.set(\"w\", \"1000\");\n        parsedUrl.searchParams.set(\"h\", \"1000\");\n\n        highQualityUrl = parsedUrl.toString();\n\n        // Preserve the original file extension if it exists\n        const originalExtension = pathname.split(\".\").pop().toLowerCase();\n        if ([\"jpg\", \"jpeg\", \"png\", \"gif\", \"webp\"].includes(originalExtension)) {\n          if (!highQualityUrl.toLowerCase().endsWith(`.${originalExtension}`)) {\n            highQualityUrl += `.${originalExtension}`;\n          }\n        }\n      } catch (error) {\n        console.error(\"Failed to parse LinkedIn image URL:\", error);\n        highQualityUrl = originalSrc;\n      }\n    } else if (currentSite === \"instagram\") {\n      if (originalSrc.includes(\"&_nc_ht=\")) {\n        try {\n          const url = new URL(originalSrc);\n          url.searchParams.delete(\"_nc_sid\");\n          url.searchParams.delete(\"_nc_ohc\");\n          url.searchParams.delete(\"_nc_ht\");\n          url.searchParams.delete(\"edm\");\n          url.searchParams.delete(\"oh\");\n          url.searchParams.delete(\"oe\");\n          highQualityUrl = url.toString();\n        } catch (error) {\n          console.error(\"Failed to parse Instagram image URL:\", error);\n        }\n      }\n    }\n\n    return highQualityUrl;\n  }\n\n  // Show message to user\n  function showMessage(message, type) {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.textContent = message;\n    messageDiv.style.position = \"fixed\";\n    messageDiv.style.bottom = \"20px\";\n    messageDiv.style.right = \"20px\";\n    messageDiv.style.padding = \"10px 20px\";\n    messageDiv.style.borderRadius = \"5px\";\n    messageDiv.style.color = \"#fff\";\n    messageDiv.style.zIndex = \"10000\";\n    messageDiv.style.boxShadow = \"0 2px 8px rgba(0, 0, 0, 0.2)\";\n    messageDiv.style.opacity = \"0\";\n    messageDiv.style.transition = \"opacity 0.5s ease-in-out\";\n\n    if (type === \"success\") {\n      messageDiv.style.backgroundColor = \"#4caf50\";\n    } else if (type === \"error\") {\n      messageDiv.style.backgroundColor = \"#f44336\";\n    } else {\n      messageDiv.style.backgroundColor = \"#333\";\n    }\n\n    document.body.appendChild(messageDiv);\n\n    void messageDiv.offsetWidth;\n\n    messageDiv.style.opacity = \"1\";\n\n    setTimeout(() => {\n      messageDiv.style.opacity = \"0\";\n      messageDiv.addEventListener(\"transitionend\", () => {\n        messageDiv.remove();\n      });\n    }, 3000);\n  }\n\n  // Debounced version of addOrUpdateOverlayToImages\n  const debouncedAddOrUpdateOverlayToImages = debounce(\n    addOrUpdateOverlayToImages,\n    500\n  );\n\n  // Handle DOM changes\n  function handleDOMChanges(mutationsList) {\n    for (const mutation of mutationsList) {\n      if (mutation.type === \"childList\" || mutation.type === \"attributes\") {\n        if (\n          mutation.addedNodes.length > 0 ||\n          (mutation.type === \"attributes\" && mutation.attributeName === \"src\")\n        ) {\n          clearTimeout(debounceTimer);\n          debounceTimer = setTimeout(() => {\n            addOrUpdateOverlayToImages();\n          }, DEBOUNCE_DELAY);\n          break;\n        }\n      }\n    }\n  }\n\n  // Set up observers for DOM changes\n  function setupObservers() {\n    bodyObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const images = node.querySelectorAll(\n                \"img:not([data-overlay-processed])\"\n              );\n              images.forEach((img, index) => processImage(img, index));\n            }\n          });\n        }\n      });\n    });\n\n    bodyObserver.observe(document.body, { childList: true, subtree: true });\n\n    setInterval(checkForNewImages, 2000);\n\n    window.addEventListener(\n      \"scroll\",\n      debounce(() => {\n        addOrUpdateOverlayToImages();\n      }, 200)\n    );\n\n    observer = new MutationObserver(handleDOMChanges);\n    observer.observe(document.body, { childList: true, subtree: true });\n  }\n\n  // Disconnect observers\n  function disconnectObservers() {\n    if (bodyObserver) {\n      bodyObserver.disconnect();\n    }\n    if (observer) {\n      observer.disconnect();\n    }\n\n    window.removeEventListener(\"scroll\", debouncedAddOrUpdateOverlayToImages);\n  }\n\n  // Check for new images periodically\n  function checkForNewImages() {\n    const images = document.querySelectorAll(\n      \"img:not([data-overlay-processed])\"\n    );\n    images.forEach((img, index) => processImage(img, index));\n  }\n\n  // Watch for changes in certification images\n  function watchCertificationImage(container) {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          const addedNodes = Array.from(mutation.addedNodes);\n          const removedNodes = Array.from(mutation.removedNodes);\n\n          const addedImage = addedNodes.find((node) => node.tagName === \"IMG\");\n          const removedImage = removedNodes.find(\n            (node) => node.tagName === \"IMG\"\n          );\n\n          if (addedImage) {\n            processImage(addedImage, \"certification\");\n          }\n\n          if (removedImage) {\n            const overlay = container.querySelector(\".image-overlay\");\n            if (overlay) {\n              overlay.remove();\n            }\n          }\n        }\n      });\n    });\n\n    observer.observe(container, { childList: true, subtree: true });\n  }\n\n  // Check if the extension is still valid\n  function checkExtensionValidity() {\n    if (!chrome.runtime.id) {\n      location.reload();\n    }\n  }\n\n  setInterval(checkExtensionValidity, 60000);\n\n  // Initialize overlay\n  async function initializeOverlay() {\n    const shouldProcess = await shouldProcessImage();\n    if (shouldProcess) {\n      addOrUpdateOverlayToImages();\n    }\n  }\n\n  // Set up the extension\n  async function setupExtension() {\n    if (!chrome.runtime || !chrome.runtime.id) {\n      return;\n    }\n\n    const hostname = window.location.hostname;\n    if (hostname.includes(\"linkedin.com\")) currentSite = \"linkedin\";\n    else if (hostname.includes(\"facebook.com\")) currentSite = \"facebook\";\n    else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\"))\n      currentSite = \"twitter\";\n    else if (hostname.includes(\"instagram.com\")) currentSite = \"instagram\";\n    else if (hostname.includes(\"reddit.com\")) currentSite = \"reddit\";\n    else currentSite = null;\n\n    if (currentSite) {\n      const shouldProcess = await shouldProcessImage();\n      if (shouldProcess) {\n        extensionEnabled = true;\n        siteEnabled = true;\n        initializeOverlay();\n        setupObservers();\n      } else {\n        disableExtension();\n      }\n    }\n  }\n\n  // Disable the extension\n  function disableExtension() {\n    extensionEnabled = false;\n    siteEnabled = false;\n    removeAllOverlays();\n    disconnectObservers();\n  }\n\n  // Handle settings updates\n  function handleSettingsUpdate(settings) {\n    extensionEnabled = settings.enableOverlay !== false;\n    siteEnabled = settings[currentSite] !== false;\n\n    if (!extensionEnabled || !siteEnabled) {\n      hideAllOverlays();\n    } else {\n      showAllOverlays();\n      addOrUpdateOverlayToImages();\n    }\n  }\n\n  // Hide all overlays\n  function hideAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => {\n      overlay.style.display = \"none\";\n    });\n  }\n\n  // Show all overlays\n  function showAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => {\n      overlay.style.display = \"flex\";\n    });\n  }\n\n  // Message listener for chrome runtime messages\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"settingsChanged\") {\n      // Update your content script's behavior based on the new settings\n      // For example:\n      updateSettings(request.changes);\n      sendResponse({ success: true });\n    }\n    if (request.action === \"updateSettings\") {\n      handleSettingsUpdate(request.settings);\n      sendResponse({ status: \"Settings updated\" });\n    }\n    return true; // Indicates that the response is sent asynchronously\n  });\n\n  function updateSettings(changes) {\n    // Implement this function to update your content script's behavior\n    // based on the changed settings\n    // Example:\n    if (changes.enableOverlay) {\n      extensionEnabled = changes.enableOverlay.newValue;\n    }\n    // Update other settings as needed\n    setupExtension(); // Re-run your setup function with the new settings\n  }\n\n  // Initialize the extension\n  setupExtension();\n\n  // Add CSS rules\n  const cssRules = ``;\n\n  const style = document.createElement(\"style\");\n  style.innerHTML = cssRules;\n  document.head.appendChild(style);\n\n  // Create image overlay\n  function createImageOverlay(imageElement) {\n    let wrapper = imageElement.closest(\".image-wrapper\");\n    if (!wrapper) {\n      wrapper = document.createElement(\"div\");\n      wrapper.className = \"image-wrapper\";\n      imageElement.parentNode.insertBefore(wrapper, imageElement);\n      wrapper.appendChild(imageElement);\n    }\n\n    const overlay = document.createElement(\"div\");\n    overlay.className = \"image-overlay\";\n    overlay.setAttribute(\"data-for-image\", imageElement.src); // Store the image URL\n    wrapper.appendChild(overlay);\n\n    // Add click handler for the overlay\n    overlay.addEventListener(\n      \"click\",\n      (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        showConsentPopup(overlay, imageElement.src);\n      },\n      true\n    );\n\n    return overlay;\n  }\n\n  // Add overlay to image\n  function addOverlay(imageElement, index) {\n    if (imageElement.getAttribute(\"aria-hidden\") === \"true\") {\n      imageElement.removeAttribute(\"aria-hidden\");\n    }\n\n    createImageOverlay(imageElement);\n  }\n\n  // Debounce timer and delay\n  let debounceTimer;\n  const DEBOUNCE_DELAY = 300;\n\n  // Log errors\n  function logError(error) {\n    // Additional logging mechanisms can be added here\n  }\n\n  // Global error event listener\n  window.addEventListener(\"error\", (event) => {\n    logError(event.error);\n  });\n\n  const getValidOrigin = () => {\n    const currentOrigin = window.location.origin;\n    if (allowedOrigins.includes(currentOrigin)) {\n      return currentOrigin;\n    }\n    return null;\n  };\n\n  // In the displayAnalysisResults function, update how we generate the detail rows\n  // Move the title attribute from detail-row to detail-label\n  const detailRow = (label, value, tooltip) => `\n    <div class=\"detail-row\">\n        <span class=\"detail-label\" title=\"${tooltip}\">${label}</span>\n        <span class=\"detail-value\">${value}</span>\n    </div>\n  `;\n\n  // Update the auth popup HTML and handlers\n  function showAuthPopup() {\n    const authPopup = document.createElement(\"div\");\n    authPopup.className = \"consent-popup\";\n    authPopup.innerHTML = `\n      <div class=\"close-x\">×</div>\n      <p class=\"consent-message\">Please log in to analyze images</p>\n      <div class=\"consent-buttons\">\n        <button class=\"confirm-btn\">Log In</button>\n        <button class=\"cancel-btn\">Cancel</button>\n      </div>\n    `;\n\n    document.body.appendChild(authPopup);\n\n    // Add click handler for login button\n    const loginButton = authPopup.querySelector(\".confirm-btn\");\n    loginButton.addEventListener(\"click\", () => {\n      // Send message to background script to open new tab\n      chrome.runtime.sendMessage({ action: \"initiateLogin\" }, (response) => {\n        if (chrome.runtime.lastError || !response?.success) {\n          // Fallback to direct window.open if message fails\n          window.open(\"https://realeyes.ai/upload-image\", \"_blank\");\n        }\n      });\n      authPopup.remove();\n    });\n\n    // Add click handler for close/cancel buttons\n    const closeButton = authPopup.querySelector(\".close-x\");\n    const cancelButton = authPopup.querySelector(\".cancel-btn\");\n\n    const cleanup = () => authPopup.remove();\n    closeButton.addEventListener(\"click\", cleanup);\n    cancelButton.addEventListener(\"click\", cleanup);\n  }\n\n  // Add listener for auth state changes\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"authStateChanged\") {\n      if (request.isAuthenticated) {\n        console.log(\"User authenticated, refreshing overlays\");\n        initializeOverlay();\n      } else {\n        console.log(\"User logged out, removing overlays\");\n        removeAllOverlays();\n      }\n    }\n  });\n})();\n"],"names":["debounce","func","wait","timeout","args","clearTimeout","setTimeout","decodeJWT","token","base64","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","decoded","JSON","parse","console","log","username","error","bodyObserver","observer","extensionEnabled","siteEnabled","currentSite","removeAllOverlays","document","querySelectorAll","forEach","overlay","remove","async","shouldProcessImage","items","Promise","resolve","reject","chrome","storage","sync","get","runtime","lastError","enableOverlay","addOrUpdateOverlayToImages","allImages","traverse","node","nodeType","Node","ELEMENT_NODE","tagName","toLowerCase","dataset","overlayProcessed","push","shadowRoot","childNodes","child","body","img","index","width","height","getAttribute","classList","contains","complete","naturalWidth","processImage","addEventListener","once","IntersectionObserver","entries","entry","isIntersecting","addOrUpdateOverlayToImage","unobserve","threshold","observe","onerror","onload","uniqueId","Date","now","querySelector","src","createElement","className","forImage","overlayId","iconImg","getURL","style","cssText","appendChild","onclick","e","stopPropagation","preventDefault","existingPopup","highestQualityUrl","canvas","naturalHeight","getContext","drawImage","toDataURL","originalSrc","highQualityUrl","closest","parsedUrl","URL","pathname","searchParams","delete","set","originalExtension","pop","includes","endsWith","url","getHighestQualityImageUrl","authToken","local","popup","authPopup","setAttribute","innerHTML","updatePopupPosition","overlayRect","getBoundingClientRect","scrollY","window","pageYOffset","left","right","top","offsetWidth","innerWidth","maxTop","documentElement","scrollHeight","offsetHeight","Math","max","min","position","debouncedUpdate","closeButton","loginButton","cancelButton","cleanup","removeEventListener","sendMessage","action","response","success","open","closePopup","event","target","imageUrl","display","storeDataCheckbox","storeData","checked","filename","mimeType","result","backgroundColor","cookies","name","cookie","value","decodedToken","userId","format","jpg","jpeg","png","gif","webp","getMimeType","fetch","then","ok","Error","status","arrayBuffer","uint8Array","Uint8Array","crypto","subtle","digest","hashBuffer","hashHex","Array","from","b","padStart","imageData","size","length","sha256Hash","origin","location","displayAnalysisResults","message","catch","sendImageForAnalysis","disconnect","showConsentPopup","showMessage","parentElement","opacity","updateOverlayPosition","rect","viewportHeight","innerHeight","viewportWidth","isPartiallyVisible","bottom","isSlideshow","isVideo","offsetParent","overlayEventListenersAdded","scrollHandler","resizeHandler","passive","MutationObserver","mutations","mutation","type","attributeName","attributes","attributeFilter","results","standardAnalysis","sageMakerAnalysis","probability","ufdAnalysis","sageMakerAnalysisUFD","analysis","toFixed","confidenceColor","titleText","requestCount","undefined","detailRow","originalFileName","fileSize","metadata","sharp","toUpperCase","space","channels","depth","density","chromaSubsampling","isProgressive","hasAlpha","hasProfile","imageHash","pHash","uploadDate","toLocaleString","originWebsites","textContent","head","feedbackBtns","feedbackComment","submitBtn","textarea","charCounter","btn","add","disabled","selectedFeedback","find","comment","trim","feedbackType","feedbackData","feedbackSection","marginTop","iconColor","title","data","errorMsg","parentNode","insertBefore","nextSibling","accordionButton","accordionContent","isOpen","selectedModel","tooltip","x","clientX","y","clientY","setProperty","closeX","messageDiv","padding","borderRadius","color","zIndex","boxShadow","transition","debouncedAddOrUpdateOverlayToImages","handleDOMChanges","mutationsList","addedNodes","debounceTimer","DEBOUNCE_DELAY","checkForNewImages","initializeOverlay","setupExtension","id","hostname","childList","subtree","setInterval","reload","onMessage","addListener","request","sender","sendResponse","changes","newValue","settings","label","isAuthenticated"],"sourceRoot":""}