{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://chrome-gmail-poc/./src/popup.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n  const loginContainer = document.getElementById(\"loginContainer\");\n  const settingsContainer = document.getElementById(\"settingsContainer\");\n  const enableOverlayToggle = document.getElementById(\"enableOverlay\");\n  const siteToggles = [\n    \"facebook\",\n    \"twitter\",\n    \"instagram\",\n    \"linkedin\",\n    \"reddit\",\n  ];\n  const settingsContent = document.getElementById(\"settingsContent\");\n  const loginButton = document.getElementById(\"login\");\n  const saveButton = document.getElementById(\"save\");\n  const logoutButton = document.getElementById(\"logoutButton\");\n\n  console.log(\"Popup script loaded\");\n\n  function logAllStorageData() {\n    chrome.storage.local.get(null, function (items) {\n      console.log(\n        \"All stored data (from popup):\",\n        JSON.stringify(items, null, 2)\n      );\n    });\n  }\n\n  // Log storage when popup opens\n  logAllStorageData();\n\n  function checkAuthentication() {\n    return new Promise((resolve) => {\n      chrome.storage.local.get([\"authToken\"], function (result) {\n        console.log(\"Auth token check result:\", result);\n        resolve(!!result.authToken);\n      });\n    });\n  }\n\n  checkAuthentication().then((isAuthenticated) => {\n    console.log(\"Authentication check result:\", isAuthenticated);\n    if (isAuthenticated) {\n      showSettings();\n    } else {\n      showLogin();\n    }\n  });\n\n  function checkExistingCookie() {\n    return new Promise((resolve) => {\n      chrome.cookies.get(\n        {\n          url: \"https://realeyes.ai\",\n          name: \"opp_access_token\",\n        },\n        (cookie) => {\n          if (cookie && cookie.value) {\n            // Store the cookie value as authToken\n            chrome.storage.local.set({ authToken: cookie.value }, () => {\n              console.log(\"Auth token set from existing cookie\");\n              resolve(true);\n            });\n          } else {\n            resolve(false);\n          }\n        }\n      );\n    });\n  }\n\n  function showLogin() {\n    console.log(\"Showing login\");\n    loginContainer.style.display = \"block\";\n    settingsContainer.style.display = \"none\";\n  }\n\n  function showSettings() {\n    console.log(\"Showing settings\");\n    loginContainer.style.display = \"none\";\n    settingsContainer.style.display = \"block\";\n    loadSavedSettings();\n  }\n\n  // Load saved settings\n  function loadSavedSettings() {\n    chrome.storage.sync.get(\n      [\n        \"enableOverlay\",\n        \"facebook\",\n        \"twitter\",\n        \"instagram\",\n        \"linkedin\",\n        \"reddit\",\n      ],\n      function (items) {\n        enableOverlayToggle.checked = items.enableOverlay !== false;\n        siteToggles.forEach((site) => {\n          document.getElementById(site).checked = items[site] !== false;\n        });\n        updateToggleStates();\n        updateContentScript(items);\n      }\n    );\n  }\n\n  // Function to update content script\n  function updateContentScript(settings) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n      if (tabs[0]) {\n        // Skip chrome:// and other protected URLs\n        if (\n          tabs[0].url.startsWith(\"chrome://\") ||\n          tabs[0].url.startsWith(\"chrome-extension://\")\n        ) {\n          console.log(\"Skipping protected URL:\", tabs[0].url);\n          return;\n        }\n\n        chrome.tabs.sendMessage(\n          tabs[0].id,\n          { action: \"updateSettings\", settings: settings },\n          function (response) {\n            if (chrome.runtime.lastError) {\n              console.log(\n                \"Content script not found in tab. Injecting content script.\"\n              );\n              chrome.scripting.executeScript(\n                {\n                  target: { tabId: tabs[0].id },\n                  files: [\"social-content.js\"],\n                },\n                () => {\n                  if (chrome.runtime.lastError) {\n                    console.log(\n                      \"Cannot inject script into this tab:\",\n                      chrome.runtime.lastError.message\n                    );\n                    return;\n                  }\n                  // Retry sending the message after injecting the script\n                  chrome.tabs.sendMessage(\n                    tabs[0].id,\n                    { action: \"updateSettings\", settings: settings },\n                    (response) => {\n                      if (chrome.runtime.lastError) {\n                        console.log(\n                          \"Error after injecting content script:\",\n                          chrome.runtime.lastError.message\n                        );\n                      } else {\n                        console.log(\n                          \"Settings updated in content script after injection\"\n                        );\n                      }\n                    }\n                  );\n                }\n              );\n            } else {\n              console.log(\"Settings updated in content script\");\n            }\n          }\n        );\n      } else {\n        console.log(\"No active tab found\");\n      }\n    });\n  }\n\n  // Function to update toggle states\n  function updateToggleStates() {\n    const isOverlayEnabled = enableOverlayToggle.checked;\n\n    if (isOverlayEnabled) {\n      settingsContent.classList.remove(\"disabled-section\");\n    } else {\n      settingsContent.classList.add(\"disabled-section\");\n    }\n\n    siteToggles.forEach((site) => {\n      const siteToggle = document.getElementById(site);\n      siteToggle.disabled = !isOverlayEnabled;\n    });\n  }\n\n  // Event listener for login button\n  if (loginButton) {\n    loginButton.addEventListener(\"click\", async function () {\n      console.log(\"Login button clicked\");\n      const hasCookie = await checkExistingCookie();\n      if (hasCookie) {\n        showSettings();\n      } else {\n        chrome.tabs.create({ url: \"https://realeyes.ai/upload-image\" });\n        window.close();\n      }\n    });\n  } else {\n    console.error(\"Login button not found\");\n  }\n\n  // Event listener for enable overlay toggle\n  if (enableOverlayToggle) {\n    enableOverlayToggle.addEventListener(\"change\", updateToggleStates);\n  } else {\n    console.error(\"Enable overlay toggle not found\");\n  }\n\n  // Event listener for save button\n  if (saveButton) {\n    saveButton.addEventListener(\"click\", function () {\n      console.log(\"Save settings button clicked\");\n      const settings = {\n        enableOverlay: enableOverlayToggle.checked,\n      };\n\n      siteToggles.forEach((site) => {\n        const siteToggle = document.getElementById(site);\n        settings[site] = siteToggle.checked;\n      });\n\n      chrome.storage.sync.set(settings, function () {\n        console.log(\"Settings saved\");\n        saveButton.textContent = \"Saved!\";\n        saveButton.classList.add(\"success\");\n        setTimeout(() => {\n          saveButton.textContent = \"Save Settings\";\n          saveButton.classList.remove(\"success\");\n        }, 2000);\n\n        updateContentScript(settings);\n      });\n    });\n  } else {\n    console.error(\"Save button not found\");\n  }\n\n  // Check for authentication status changes\n  chrome.storage.onChanged.addListener(function (changes, namespace) {\n    if (namespace === \"local\" && changes.authToken) {\n      if (changes.authToken.newValue) {\n        showSettings();\n      } else {\n        showLogin();\n      }\n    }\n  });\n\n  // Add logout button handler\n  if (logoutButton) {\n    logoutButton.addEventListener(\"click\", function () {\n      // Clear local storage auth token\n      chrome.storage.local.remove(\"authToken\", function () {\n        console.log(\"Auth token removed\");\n\n        // Remove the opp_access_token cookie\n        chrome.cookies.remove(\n          { url: \"https://realeyes.ai\", name: \"opp_access_token\" },\n          function (details) {\n            // Construct logout URL with proper endpoint\n            const logoutUrl = new URL(\"https://signin.realeyes.ai/logout\");\n            logoutUrl.searchParams.append(\n              \"client_id\",\n              \"49nfihgrtdm78kf6su5brla4o5\"\n            );\n            logoutUrl.searchParams.append(\"logout_uri\", \"https://realeyes.ai\");\n\n            // Open logout URL in new tab and close popup\n            chrome.tabs.create({ url: logoutUrl.toString() });\n            window.close();\n          }\n        );\n      });\n    });\n  }\n});\n"],"names":["document","addEventListener","loginContainer","getElementById","settingsContainer","enableOverlayToggle","siteToggles","settingsContent","loginButton","saveButton","logoutButton","showLogin","console","log","style","display","showSettings","chrome","storage","sync","get","items","checked","enableOverlay","forEach","site","updateToggleStates","updateContentScript","settings","tabs","query","active","currentWindow","url","startsWith","sendMessage","id","action","response","runtime","lastError","scripting","executeScript","target","tabId","files","message","isOverlayEnabled","classList","remove","add","disabled","local","JSON","stringify","Promise","resolve","result","authToken","then","isAuthenticated","async","cookies","name","cookie","value","set","create","window","close","error","siteToggle","textContent","setTimeout","onChanged","addListener","changes","namespace","newValue","details","logoutUrl","URL","searchParams","append","toString"],"sourceRoot":""}