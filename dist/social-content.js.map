{"version":3,"file":"social-content.js","mappings":"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","sources":["webpack://chrome-gmail-poc/./src/social-content.js"],"sourcesContent":["(() => {\n  // At the top of the file, add:\n  // Utility function to debounce frequent function calls\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Add after the debounce function (around line 15)\n  function decodeJWT(token) {\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split(\"\")\n          .map((c) => {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n          })\n          .join(\"\")\n      );\n      const decoded = JSON.parse(jsonPayload);\n      console.log(\"Decoded JWT payload:\", decoded);\n      console.log(\"Extracted userId:\", decoded.username);\n      return decoded;\n    } catch (error) {\n      console.error(\"Error decoding JWT:\", error);\n      return null;\n    }\n  }\n\n  // Global variables\n  let extensionEnabled = false;\n  let siteEnabled = false;\n  let currentSite = null;\n\n  let retryCount = 0;\n  const MAX_RETRIES = 5;\n  const INITIAL_RETRY_DELAY = 1000; // 1 second\n\n  let bodyObserver;\n  let observer;\n\n  // Remove all overlay elements from the page\n  function removeAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => overlay.remove());\n  }\n\n  // Check if image processing should occur based on user settings\n  async function shouldProcessImage() {\n    try {\n      const items = await new Promise((resolve, reject) => {\n        chrome.storage.sync.get(\n          [\n            \"enableOverlay\",\n            \"facebook\",\n            \"twitter\",\n            \"instagram\",\n            \"linkedin\",\n            \"reddit\",\n          ],\n          (items) => {\n            if (chrome.runtime.lastError) {\n              reject(chrome.runtime.lastError);\n            } else {\n              resolve(items);\n            }\n          }\n        );\n      });\n\n      extensionEnabled = items.enableOverlay !== false;\n      siteEnabled = items[currentSite] !== false;\n\n      return extensionEnabled && siteEnabled;\n    } catch (error) {\n      console.error(\"Error in shouldProcessImage:\", error);\n      return false;\n    }\n  }\n\n  // Main function to add or update overlays on images\n  async function addOrUpdateOverlayToImages() {\n    const shouldProcess = await shouldProcessImage();\n    if (!shouldProcess) {\n      removeAllOverlays();\n      return;\n    }\n\n    const allImages = [];\n\n    // Recursive function to traverse DOM and shadow DOM\n    function traverse(node) {\n      if (node.nodeType !== Node.ELEMENT_NODE) return;\n      if (\n        node.tagName.toLowerCase() === \"img\" &&\n        !node.dataset.overlayProcessed\n      ) {\n        allImages.push(node);\n      }\n\n      if (node.shadowRoot) {\n        traverse(node.shadowRoot);\n      }\n\n      node.childNodes.forEach((child) => traverse(child));\n    }\n\n    traverse(document.body);\n\n    // Special handling for Instagram\n    if (currentSite === \"instagram\") {\n      const instagramImages = document.querySelectorAll(\n        'img[srcset], img[src*=\"instagram\"]'\n      );\n      instagramImages.forEach((img) => {\n        if (!img.dataset.overlayProcessed) {\n          allImages.push(img);\n        }\n      });\n    }\n\n    // Special handling for Reddit\n    if (currentSite === \"reddit\") {\n      const redditImages = document.querySelectorAll('img[alt=\"Post image\"]');\n      redditImages.forEach((img) => allImages.push(img));\n    }\n\n    // Process each image\n    allImages.forEach((img, index) => {\n      if (\n        (img.width > 50 && img.height > 50) ||\n        (img.getAttribute(\"width\") > 50 && img.getAttribute(\"height\") > 50) ||\n        img.classList.contains(\"media-lightbox-img\")\n      ) {\n        try {\n          if (img.complete && img.naturalWidth > 0) {\n            processImage(img, index);\n          } else {\n            img.addEventListener(\n              \"load\",\n              () => {\n                processImage(img, index);\n              },\n              { once: true }\n            );\n          }\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n        }\n      } else {\n        img.dataset.overlayProcessed = \"skipped\";\n      }\n    });\n  }\n\n  // Process individual image\n  function processImage(img, index) {\n    if (img.dataset.overlayProcessed === \"true\") {\n      return;\n    }\n\n    // Use Intersection Observer to detect when image is in viewport\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            if (\n              (img.width > 100 && img.height > 100) ||\n              img.tagName.toLowerCase() === \"video\"\n            ) {\n              addOrUpdateOverlayToImage(img, index);\n            }\n            observer.unobserve(img);\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(img);\n\n    img.dataset.overlayProcessed = \"true\";\n\n    // Error handling for image loading\n    img.onerror = function () {\n      // Error handling logic here if needed\n    };\n\n    // Handle successful image load\n    img.onload = function () {\n      if (\n        (img.width > 100 && img.height > 100) ||\n        img.tagName.toLowerCase() === \"video\"\n      ) {\n        addOrUpdateOverlayToImage(img, index);\n      }\n    };\n  }\n\n  // Add or update overlay on an image\n  function addOrUpdateOverlayToImage(img, index) {\n    // Create a unique identifier for this image/overlay pair\n    const uniqueId = `overlay-${index}-${Date.now()}`;\n\n    let overlay = document.querySelector(\n      `.image-overlay[data-for-image=\"${img.src}\"]`\n    );\n\n    if (!overlay) {\n      overlay = document.createElement(\"div\");\n      overlay.className = \"image-overlay\";\n      overlay.dataset.forImage = img.src;\n      overlay.dataset.overlayId = uniqueId;\n\n      // Create an img element for the icon\n      const iconImg = document.createElement(\"img\");\n      iconImg.src = chrome.runtime.getURL(\"icons/realeyes-ai-icon.png\");\n      iconImg.style.cssText = `\n        width: 20px;\n        height: 20px;\n        object-fit: contain;\n        ${currentSite === \"reddit\" ? \"margin-top: 16px;\" : \"\"}\n      `;\n\n      overlay.style.cssText = `\n            position: absolute;\n            width: 30px;\n            height: 30px;\n            background-color: rgba(255, 255, 255, 0.4);\n            border-radius: 50%;\n            cursor: pointer;\n            z-index: 2147483647;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 20px;\n            pointer-events: auto;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n            opacity: 0.5;\n            transition: opacity 0.3s ease, background-color 0.3s ease, display 0.3s ease;\n        `;\n\n      // Replace emoji with the image\n      overlay.appendChild(iconImg);\n\n      overlay.onclick = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        // First try to find popup by image src\n        let existingPopup = document.querySelector(\n          `.consent-popup[data-for-image=\"${img.src}\"]`\n        );\n\n        // If not found, try to find by overlay ID\n        if (!existingPopup) {\n          existingPopup = document.querySelector(\n            `.consent-popup[data-overlay-id=\"${uniqueId}\"]`\n          );\n        }\n\n        // If popup exists, remove it\n        if (existingPopup) {\n          existingPopup.remove();\n          return;\n        }\n\n        const highestQualityUrl = getHighestQualityImageUrl(img);\n\n        if (highestQualityUrl) {\n          showConsentPopup(overlay, highestQualityUrl, uniqueId);\n        } else {\n          showMessage(\"No suitable image found.\", \"error\");\n        }\n      };\n\n      img.parentElement.appendChild(overlay);\n\n      overlay.addEventListener(\"mouseenter\", () => {\n        overlay.style.opacity = \"1\";\n        overlay.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n      });\n\n      overlay.addEventListener(\"mouseleave\", () => {\n        overlay.style.opacity = \"0.5\";\n        overlay.style.backgroundColor = \"rgba(255, 255, 255, 0.4)\";\n      });\n    }\n\n    const updateOverlayPosition = debounce(() => {\n      const rect = img.getBoundingClientRect();\n      const viewportHeight = window.innerHeight;\n      const viewportWidth = window.innerWidth;\n\n      const isPartiallyVisible =\n        rect.top < viewportHeight &&\n        rect.bottom > 0 &&\n        rect.left < viewportWidth &&\n        rect.right > 0;\n\n      const isSlideshow = img.closest(\".media-lightbox-img\") !== null;\n      const isVideo =\n        img.tagName.toLowerCase() === \"video\" || img.querySelector(\"video\");\n\n      if (\n        isPartiallyVisible &&\n        ((rect.width > 100 && rect.height > 100) || isVideo) &&\n        (!isSlideshow || img.offsetParent !== null)\n      ) {\n        overlay.style.display = \"flex\";\n        const top = 10;\n        const right = 10;\n        overlay.style.top = `${top}px`;\n        overlay.style.right = `${right}px`;\n        overlay.style.bottom = \"auto\";\n        overlay.style.left = \"auto\";\n      } else if (isVideo) {\n        overlay.style.display = \"flex\";\n        overlay.style.top = \"10px\";\n        overlay.style.right = \"10px\";\n        overlay.style.bottom = \"auto\";\n        overlay.style.left = \"auto\";\n      } else {\n        setTimeout(() => {\n          if (!isPartiallyVisible) {\n            overlay.style.display = \"none\";\n          }\n        }, 300); // 300ms delay before hiding\n      }\n    }, 100); // 100ms debounce\n\n    updateOverlayPosition();\n\n    if (!img.dataset.overlayEventListenersAdded) {\n      const scrollHandler = () => {\n        updateOverlayPosition();\n      };\n      const resizeHandler = () => {\n        updateOverlayPosition();\n      };\n      window.addEventListener(\"scroll\", scrollHandler, { passive: true });\n      window.addEventListener(\"resize\", resizeHandler, { passive: true });\n      img.dataset.overlayEventListenersAdded = \"true\";\n    }\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === \"attributes\" &&\n          (mutation.attributeName === \"src\" ||\n            mutation.attributeName === \"style\")\n        ) {\n          overlay.dataset.forImage = img.src;\n          updateOverlayPosition();\n        }\n      });\n    });\n\n    observer.observe(img, {\n      attributes: true,\n      attributeFilter: [\"src\", \"style\"],\n    });\n  }\n\n  // Show consent popup before sending image for analysis\n  function showConsentPopup(target, imageUrl, overlayId) {\n    // Check for existing popup using both image URL and overlay ID\n    let existingPopup = document.querySelector(\n      `.consent-popup[data-for-image=\"${imageUrl}\"]`\n    );\n\n    if (!existingPopup) {\n      existingPopup = document.querySelector(\n        `.consent-popup[data-overlay-id=\"${overlayId}\"]`\n      );\n    }\n\n    if (existingPopup) {\n      return existingPopup;\n    }\n\n    // Remove any other popups\n    const existingPopups = document.querySelectorAll(\".consent-popup\");\n    existingPopups.forEach((popup) => popup.remove());\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"consent-popup\";\n    popup.setAttribute(\"data-for-image\", imageUrl);\n    popup.setAttribute(\"data-overlay-id\", overlayId); // Add overlay ID to popup\n\n    // Add popup content\n    popup.innerHTML = `\n        <p class=\"consent-message\">Analyze this image?</p>\n        <div class=\"consent-buttons\">\n            <button class=\"confirm-btn\">Analyze Now</button>\n            <button class=\"cancel-btn\">Skip</button>\n        </div>\n        <div class=\"consent-options\">\n            <label class=\"store-data-option\">\n                <input type=\"checkbox\" class=\"store-data-checkbox\" id=\"storeImageData\" checked>\n                <span>Help us improve detection by storing this image</span>\n            </label>\n        </div>\n    `;\n\n    document.body.appendChild(popup);\n\n    // Create an Intersection Observer for the target (overlay icon)\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            // Show popup when target is visible\n            popup.style.display = \"flex\";\n            updatePopupPosition();\n          } else {\n            // Hide popup when target is not visible\n            popup.style.display = \"none\";\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(target);\n\n    // Position the popup relative to the icon overlay\n    const updatePopupPosition = () => {\n      if (popup.style.display === \"none\") return;\n\n      const overlayRect = target.getBoundingClientRect();\n      const scrollY = window.scrollY || window.pageYOffset;\n\n      // Calculate position relative to the overlay icon\n      let left = overlayRect.right + 10;\n      let top = overlayRect.top + scrollY; // Add scroll offset back\n\n      // If popup would go off-screen to the right, position it to the left\n      if (left + popup.offsetWidth > window.innerWidth - 10) {\n        left = overlayRect.left - popup.offsetWidth - 10;\n      }\n\n      // Ensure popup stays within viewport bounds vertically\n      const maxTop =\n        document.documentElement.scrollHeight - popup.offsetHeight - 10;\n      top = Math.max(10, Math.min(top, maxTop));\n\n      popup.style.position = \"absolute\"; // Change back to absolute\n      popup.style.left = `${left}px`;\n      popup.style.top = `${top}px`;\n    };\n\n    // Add scroll event listener to hide popup when image is out of view\n    const visibilityObserver = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) {\n            popup.style.display = \"none\";\n          }\n        });\n      },\n      { threshold: 0 }\n    );\n\n    visibilityObserver.observe(target);\n\n    // Initial positioning\n    setTimeout(updatePopupPosition, 0);\n\n    // Update position on window resize and scroll\n    const debouncedUpdate = debounce(updatePopupPosition, 100);\n    window.addEventListener(\"resize\", debouncedUpdate);\n    window.addEventListener(\"scroll\", debouncedUpdate);\n\n    // Enhanced cleanup function\n    const cleanup = () => {\n      window.removeEventListener(\"resize\", debouncedUpdate);\n      window.removeEventListener(\"scroll\", debouncedUpdate);\n      observer.disconnect();\n      popup.remove();\n    };\n\n    // Update the confirm button click handler\n    popup\n      .querySelector(\".confirm-btn\")\n      ?.addEventListener(\"click\", async (e) => {\n        e.preventDefault();\n\n        const storeDataCheckbox = popup.querySelector(\"#storeImageData\");\n        const storeData = storeDataCheckbox ? storeDataCheckbox.checked : false;\n\n        // Remove ALL existing content from popup\n        popup.innerHTML = '<div class=\"loading-indicator\">Analyzing...</div>';\n\n        // Send image for analysis using the existing popup\n        await sendImageForAnalysis(imageUrl, popup, storeData);\n      });\n\n    // Only add cleanup to cancel button\n    popup.querySelector(\".cancel-btn\")?.addEventListener(\"click\", cleanup);\n\n    return popup;\n  }\n\n  // Send image data for analysis\n  function sendImageForAnalysis(url, popup, storeData) {\n    let filename = url.split(\"/\").pop().split(\"?\")[0];\n    let mimeType = \"image/jpeg\"; // Default to JPEG for Twitter images\n\n    // Get auth token first\n    chrome.storage.local.get([\"authToken\"], async function (result) {\n      const authToken = result.authToken;\n\n      if (!authToken) {\n        displayAnalysisResults(\n          popup,\n          \"Authentication required. Please log in and try again.\",\n          \"error\"\n        );\n        return;\n      }\n\n      // Decode JWT and get userId\n      const decodedToken = decodeJWT(authToken);\n      const userId = decodedToken?.username || null;\n\n      if (url.includes(\"twimg.com\")) {\n        // For Twitter images, extract format from URL\n        const format = new URL(url).searchParams.get(\"format\");\n        if (format) {\n          filename += `.${format}`;\n          mimeType = `image/${format}`;\n        }\n      } else {\n        mimeType = getMimeType(filename);\n      }\n\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          return response.arrayBuffer();\n        })\n        .then((arrayBuffer) => {\n          const uint8Array = new Uint8Array(arrayBuffer);\n          return crypto.subtle\n            .digest(\"SHA-256\", uint8Array)\n            .then((hashBuffer) => {\n              const hashArray = Array.from(new Uint8Array(hashBuffer));\n              const hashHex = hashArray\n                .map((b) => b.toString(16).padStart(2, \"0\"))\n                .join(\"\");\n              return { uint8Array, hashHex };\n            });\n        })\n        .then(({ uint8Array, hashHex }) => {\n          chrome.runtime.sendMessage(\n            {\n              action: \"sendImage\",\n              imageData: {\n                url,\n                mimeType,\n                filename,\n                size: uint8Array.length,\n                sha256Hash: hashHex,\n                origin: window.location.origin,\n                storeData: storeData,\n                userId: userId, // Add userId to the request\n              },\n            },\n            (response) => {\n              if (chrome.runtime.lastError) {\n                displayAnalysisResults(\n                  popup,\n                  \"Error: \" + chrome.runtime.lastError.message,\n                  \"error\"\n                );\n              } else if (response.error === \"Authentication required\") {\n                displayAnalysisResults(\n                  popup,\n                  \"Authentication required. Please log in and try again.\",\n                  \"error\"\n                );\n              } else {\n                displayAnalysisResults(popup, response, \"success\");\n              }\n            }\n          );\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n          displayAnalysisResults(popup, \"Error: \" + error.message, \"error\");\n        });\n    });\n  }\n\n  // Simplify displayAnalysisResults since UI cleanup is handled earlier\n  function displayAnalysisResults(popup, results, status) {\n    const overlayId = popup.getAttribute(\"data-overlay-id\");\n    popup.innerHTML = \"\";\n\n    if (status === \"error\") {\n      popup.innerHTML = `\n            <div class=\"error-container\">\n                <div class=\"close-x\">×</div>\n                <p class=\"error\">${results}</p>\n            </div>\n        `;\n    } else {\n      // Get the analysis with higher probability\n      const standardAnalysis = results.sageMakerAnalysis;\n      const ufdAnalysis = results.sageMakerAnalysisUFD;\n\n      const analysis =\n        standardAnalysis.probability > ufdAnalysis.probability\n          ? standardAnalysis\n          : ufdAnalysis;\n      const modelUsed =\n        standardAnalysis.probability > ufdAnalysis.probability\n          ? \"DMImageDetection Model\"\n          : \"UniversalFakeDetect Model\";\n\n      if (analysis) {\n        const probability = (analysis.probability * 100).toFixed(1);\n\n        // Determine color and text based on probability\n        let confidenceColor;\n        let titleText;\n        if (probability < 33) {\n          confidenceColor = \"#28a745\";\n          titleText = \"This content is likely real.\";\n        } else if (probability < 66) {\n          confidenceColor = \"#ffc107\";\n          titleText = \"This content is uncertain—proceed with caution.\";\n        } else {\n          confidenceColor = \"#dc3545\";\n          titleText = \"This content is likely a deepfake.\";\n        }\n\n        popup.innerHTML = `\n                <div class=\"close-x\">×</div>\n                <div class=\"analysis-title\" style=\"color: ${confidenceColor}\">${titleText}</div>\n\n                <div class=\"probability-circle\">\n                    <svg width=\"150\" height=\"150\" viewBox=\"0 0 150 150\">\n                        <circle\n                            cx=\"75\"\n                            cy=\"75\"\n                            r=\"70\"\n                            stroke=\"#E6E6E6\"\n                            stroke-width=\"10\"\n                            fill=\"none\"\n                        />\n                        <circle\n                            cx=\"75\"\n                            cy=\"75\"\n                            r=\"70\"\n                            stroke=\"${confidenceColor}\"\n                            stroke-width=\"10\"\n                            fill=\"none\"\n                            stroke-linecap=\"round\"\n                            stroke-dasharray=\"439.82\"\n                            stroke-dashoffset=\"${\n                              439.82 * (1 - probability / 100)\n                            }\"\n                            transform=\"rotate(-90 75 75)\"\n                            style=\"transition: stroke-dashoffset 1s\"\n                        />\n                    </svg>\n                    <div class=\"probability-text\">\n                        <div class=\"probability-value\" style=\"color: ${confidenceColor}\">${probability}%</div>\n                        <div class=\"probability-label\" style=\"\n                            font-size: 12px;\n                            color: #333;\n                            margin-top: 10px;\n                        \">Deepfake Probability</div>\n                    </div>\n                </div>\n\n                <div class=\"confidence-indicators\">\n                    <div class=\"indicator real\">\n                        <div class=\"indicator-dot\"></div>\n                        <div class=\"indicator-label\">Likely Real</div>\n                    </div>\n                    <div class=\"indicator uncertain\">\n                        <div class=\"indicator-dot\"></div>\n                        <div class=\"indicator-label\" style=\"white-space: nowrap;\">Uncertain</div>\n                    </div>\n                    <div class=\"indicator fake\">\n                        <div class=\"indicator-dot\"></div>\n                        <div class=\"indicator-label\">Likely Deepfake</div>\n                    </div>\n                </div>\n\n                <div class=\"request-count\" data-tooltip=\"${\n                  results.requestCount === 1\n                    ? \"The analysis results were determined in near-real-time\"\n                    : \"Displaying cached analysis results\"\n                }\">\n                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM12 20C7.6 20 4 16.4 4 12C4 7.6 7.6 4 12 4C16.4 4 20 7.6 20 12C20 16.4 16.4 20 12 20Z\" fill=\"#666\"/>\n                        <path d=\"M12.5 7H11V13L16.2 16.2L17 14.9L12.5 12.2V7Z\" fill=\"#666\"/>\n                    </svg>\n                    ${\n                      results.requestCount === 1\n                        ? \"You're the first to analyze this image\"\n                        : `Image analyzed ${results.requestCount} time${\n                            results.requestCount !== 1 ? \"s\" : \"\"\n                          }`\n                    }\n                </div>\n\n                <div class=\"analysis-details-accordion\">\n                    <button class=\"accordion-button\">\n                        <span>View Analysis Details</span>\n                    </button>\n                    \n                    <div class=\"accordion-content\">\n                        <div class=\"details-section\">\n                            <div class=\"model-comparison\">\n                                <div class=\"model-result ${\n                                  standardAnalysis.probability >\n                                  ufdAnalysis.probability\n                                    ? \"selected\"\n                                    : \"\"\n                                }\">\n                                    <h4 style=\"font-size: 12px;\">DMImageDetection</h4>\n                                    <div class=\"model-probability\">${(\n                                      standardAnalysis.probability * 100\n                                    ).toFixed(1)}%</div>\n                                </div>\n                                <div class=\"model-result ${\n                                  ufdAnalysis.probability >\n                                  standardAnalysis.probability\n                                    ? \"selected\"\n                                    : \"\"\n                                }\">\n                                    <h4 style=\"font-size: 12px;\">UniversalFakeDetect</h4>\n                                    <div class=\"model-probability\">\n                                        <div class=\"bar-fill\" style=\"width: ${(\n                                          ufdAnalysis.probability * 100\n                                        ).toFixed(1)}%\"></div>\n                                        <span>${(\n                                          ufdAnalysis.probability * 100\n                                        ).toFixed(1)}%</span>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div class=\"details-grid\">\n                                ${detailRow(\n                                  \"File Name\",\n                                  results.originalFileName,\n                                  \"Original filename of the uploaded image\"\n                                )}\n                                ${detailRow(\n                                  \"File Size\",\n                                  `${(results.fileSize / 1024).toFixed(2)} KB`,\n                                  \"Size of the image file in kilobytes\"\n                                )}\n                                ${detailRow(\n                                  \"Dimensions\",\n                                  `${results.metadata.sharp.width}x${results.metadata.sharp.height}`,\n                                  \"Width and height of the image in pixels\"\n                                )}\n                                ${detailRow(\n                                  \"Format\",\n                                  results.metadata.sharp.format.toUpperCase(),\n                                  \"Image file format\"\n                                )}\n                                ${detailRow(\n                                  \"Color Space\",\n                                  results.metadata.sharp.space.toUpperCase(),\n                                  \"Color space used by the image (sRGB, CMYK, etc.)\"\n                                )}\n                                ${detailRow(\n                                  \"Channels\",\n                                  results.metadata.sharp.channels,\n                                  \"Number of color channels in the image\"\n                                )}\n                                ${detailRow(\n                                  \"Bit Depth\",\n                                  results.metadata.sharp.depth,\n                                  \"Bits per channel used to represent colors\"\n                                )}\n                                ${detailRow(\n                                  \"Resolution\",\n                                  `${results.metadata.sharp.density} DPI`,\n                                  \"Image resolution in dots per inch (DPI)\"\n                                )}\n                                ${detailRow(\n                                  \"Chroma Subsampling\",\n                                  results.metadata.sharp.chromaSubsampling,\n                                  \"Type of chroma subsampling used for color compression\"\n                                )}\n                                ${detailRow(\n                                  \"Progressive Loading\",\n                                  results.metadata.sharp.isProgressive\n                                    ? \"Yes\"\n                                    : \"No\",\n                                  \"Whether the image uses progressive loading\"\n                                )}\n                                ${detailRow(\n                                  \"Has Alpha Channel\",\n                                  results.metadata.sharp.hasAlpha\n                                    ? \"Yes\"\n                                    : \"No\",\n                                  \"Whether the image contains transparency\"\n                                )}\n                                ${detailRow(\n                                  \"Has Color Profile\",\n                                  results.metadata.sharp.hasProfile\n                                    ? \"Yes\"\n                                    : \"No\",\n                                  \"Whether the image contains a color profile\"\n                                )}\n                                ${detailRow(\n                                  \"Image Hash\",\n                                  results.imageHash,\n                                  \"Unique SHA-256 hash of the image content\"\n                                )}\n                                ${detailRow(\n                                  \"Perceptual Hash\",\n                                  results.pHash,\n                                  \"Perceptual hash used for finding similar images\"\n                                )}\n                                ${detailRow(\n                                  \"Upload Date\",\n                                  new Date(results.uploadDate).toLocaleString(),\n                                  \"When the image was uploaded for analysis\"\n                                )}\n                                ${detailRow(\n                                  \"Origin Website\",\n                                  results.originWebsites?.[0] || \"Unknown\",\n                                  \"Website where the image was found\"\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"feedback-section\">\n                    <p>Was this analysis helpful?</p>\n                    <div class=\"feedback-buttons\">\n                        <button class=\"feedback-btn thumbs-up\" data-image-hash=\"${\n                          results.imageHash\n                        }\" data-value=\"up\">\n                            <span>👍</span>\n                        </button>\n                        <button class=\"feedback-btn thumbs-down\" data-image-hash=\"${\n                          results.imageHash\n                        }\" data-value=\"down\">\n                            <span>👎</span>\n                        </button>\n                    </div>\n                    <div class=\"feedback-comment\" style=\"display: none;\">\n                        <div class=\"textarea-container\">\n                            <textarea placeholder=\"Tell us why (optional)\" maxlength=\"100\"></textarea>\n                            <div class=\"char-counter\">0/100 characters</div>\n                        </div>\n                        <button class=\"submit-feedback-btn\">Submit Feedback</button>\n                    </div>\n                </div>\n            `;\n\n        // Add CSS for the close-x\n        const style = document.createElement(\"style\");\n        style.textContent = `\n                .close-x {\n                    position: absolute;\n                    top: 5px;\n                    right: 10px;\n                    cursor: pointer;\n                    font-size: 20px;\n                    color: #666;\n                    transition: color 0.2s;\n                }\n                .close-x:hover {\n                    color: #333;\n                }\n            `;\n        document.head.appendChild(style);\n\n        // Add event listeners for feedback buttons\n        const feedbackBtns = popup.querySelectorAll(\".feedback-btn\");\n        const feedbackComment = popup.querySelector(\".feedback-comment\"); // Changed from textarea to container\n        const submitBtn = popup.querySelector(\".submit-feedback-btn\");\n        const textarea = popup.querySelector(\"textarea\");\n        const charCounter = popup.querySelector(\".char-counter\");\n\n        feedbackBtns.forEach((btn) => {\n          btn.addEventListener(\"click\", () => {\n            // Remove active class from all buttons\n            feedbackBtns.forEach((b) => b.classList.remove(\"active\"));\n            // Add active class to clicked button\n            btn.classList.add(\"active\");\n            // Show comment section\n            feedbackComment.style.display = \"block\"; // Changed from textarea to container\n          });\n        });\n\n        textarea.addEventListener(\"input\", () => {\n          const length = textarea.value.length;\n          const remaining = 100 - length;\n          charCounter.textContent = `${length}/100 characters`;\n\n          // Update counter color based on remaining characters\n          charCounter.classList.remove(\"near-limit\", \"at-limit\");\n          if (length >= 90) {\n            charCounter.classList.add(\"at-limit\");\n          } else if (length >= 75) {\n            charCounter.classList.add(\"near-limit\");\n          }\n        });\n\n        submitBtn.addEventListener(\"click\", async () => {\n          // Disable the submit button and show loading state\n          submitBtn.disabled = true;\n          submitBtn.innerHTML = `\n            <span class=\"spinner\"></span>\n            Sending...\n          `;\n\n          // Get auth token from storage\n          const { authToken } = await chrome.storage.local.get([\"authToken\"]);\n          console.log(\n            \"Retrieved authToken:\",\n            authToken ? \"Token exists\" : \"No token found\"\n          );\n\n          if (!authToken) {\n            console.error(\"No auth token found\");\n            submitBtn.innerHTML = \"Error: Please log in\";\n            return;\n          }\n\n          // Decode JWT and get userId\n          const decodedToken = decodeJWT(authToken);\n          const userId = decodedToken?.username || null;\n          console.log(\"Final userId to be submitted:\", userId);\n\n          const feedbackBtns = popup.querySelectorAll(\".feedback-btn\");\n          const feedbackComment = popup.querySelector(\"textarea\");\n          const imageHash = feedbackBtns[0].dataset.imageHash;\n          const selectedFeedback = Array.from(feedbackBtns)\n            .find((btn) => btn.classList.contains(\"active\"))\n            ?.getAttribute(\"data-value\");\n          const comment = feedbackComment?.value?.trim() || \"\";\n\n          if (!selectedFeedback) {\n            console.error(\"No feedback selected\");\n            return;\n          }\n\n          console.log(\"Submitting feedback with data:\", {\n            imageHash,\n            feedbackType: selectedFeedback,\n            comment,\n            userId,\n          });\n\n          try {\n            // Send message to background script\n            chrome.runtime.sendMessage(\n              {\n                action: \"submitFeedback\",\n                feedbackData: {\n                  imageHash,\n                  feedbackType: selectedFeedback,\n                  comment,\n                  userId,\n                },\n                origin: window.location.origin,\n              },\n              (response) => {\n                console.log(\"Feedback submission response:\", response);\n                if (response.success) {\n                  // Show success message without animations\n                  const feedbackSection =\n                    popup.querySelector(\".feedback-section\");\n                  feedbackSection.style.marginTop = \"0\";\n                  feedbackSection.innerHTML = `\n                    <div class=\"feedback-success\">\n                      <div class=\"icon-container\">\n                        <svg class=\"status-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n                          <circle cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"2\"/>\n                          <path fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"2\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n                        </svg>\n                      </div>\n                      <h3 class=\"feedback-title\">Thank you!</h3>\n                      <p class=\"feedback-message\">Your feedback helps improve our analyses</p>\n                    </div>\n                  `;\n                } else if (response.alreadySubmitted) {\n                  // Show already submitted message without animations\n                  const feedbackSection =\n                    popup.querySelector(\".feedback-section\");\n                  feedbackSection.style.marginTop = \"0\";\n                  feedbackSection.innerHTML = `\n                    <div class=\"feedback-already-submitted\">\n                      <div class=\"icon-container\">\n                        <svg class=\"status-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n                          <circle cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\" stroke=\"#3498db\" stroke-width=\"2\"/>\n                          <path fill=\"none\" stroke=\"#3498db\" stroke-width=\"2\" d=\"M26 15v2m0 7v13\"/>\n                        </svg>\n                      </div>\n                      <h3 class=\"feedback-title\" style=\"color: #3498db;\">Already Submitted</h3>\n                      <p class=\"feedback-message\">You've already provided feedback for this image</p>\n                    </div>\n                  `;\n                } else {\n                  // Existing error handling\n                  submitBtn.disabled = false;\n                  submitBtn.innerHTML = \"Submit Feedback\";\n\n                  const errorMsg = document.createElement(\"p\");\n                  errorMsg.className = \"feedback-error\";\n                  errorMsg.textContent = `Error: ${\n                    response.error || \"Failed to submit feedback\"\n                  }`;\n                  submitBtn.parentNode.insertBefore(\n                    errorMsg,\n                    submitBtn.nextSibling\n                  );\n                }\n              }\n            );\n          } catch (error) {\n            console.error(\"Error in feedback submission:\", error);\n            submitBtn.disabled = false;\n            submitBtn.innerHTML = \"Submit Feedback\";\n\n            const errorMsg = document.createElement(\"p\");\n            errorMsg.className = \"feedback-error\";\n            errorMsg.textContent = \"Error: Failed to submit feedback\";\n            submitBtn.parentNode.insertBefore(errorMsg, submitBtn.nextSibling);\n          }\n        });\n\n        console.log(\"Feedback buttons:\", {\n          feedbackBtns: popup.querySelectorAll(\".feedback-btn\"),\n          submitBtn: popup.querySelector(\".submit-feedback-btn\"),\n          feedbackComment: popup.querySelector(\"textarea\"),\n        });\n\n        textarea.addEventListener(\"input\", () => {\n          const length = textarea.value.length;\n          const remaining = 100 - length;\n          charCounter.textContent = `${length}/100 characters`;\n\n          // Update counter color based on remaining characters\n          charCounter.classList.remove(\"near-limit\", \"at-limit\");\n          if (length >= 90) {\n            charCounter.classList.add(\"at-limit\");\n          } else if (length >= 75) {\n            charCounter.classList.add(\"near-limit\");\n          }\n        });\n\n        // Add accordion functionality\n        const accordionButton = popup.querySelector(\".accordion-button\");\n        const accordionContent = popup.querySelector(\".accordion-content\");\n\n        accordionButton.addEventListener(\"click\", () => {\n          const isOpen = accordionContent.style.display === \"block\";\n          accordionContent.style.display = isOpen ? \"none\" : \"block\";\n        });\n      } else {\n        popup.innerHTML = `\n                <div class=\"error-container\">\n                    <div class=\"close-x\">×</div>\n                    <p class=\"error\">No analysis results available</p>\n                </div>\n            `;\n      }\n    }\n\n    // Ensure the overlay ID is maintained\n    popup.setAttribute(\"data-overlay-id\", overlayId);\n\n    // Add click handler for the close X\n    const closeX = popup.querySelector(\".close-x\");\n    if (closeX) {\n      closeX.addEventListener(\"click\", () => {\n        popup.remove();\n      });\n    }\n  }\n\n  // Helper function to get MIME type from filename\n  function getMimeType(filename) {\n    const ext = filename.split(\".\").pop().toLowerCase();\n    const mimeTypes = {\n      jpg: \"image/jpeg\",\n      jpeg: \"image/jpeg\",\n      png: \"image/png\",\n      gif: \"image/gif\",\n      webp: \"image/webp\",\n    };\n    return mimeTypes[ext] || \"application/octet-stream\";\n  }\n\n  // Get the highest quality image URL\n  function getHighestQualityImageUrl(img) {\n    if (currentSite === \"instagram\") {\n      // Try to get the image data from the loaded image\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.naturalWidth;\n      canvas.height = img.naturalHeight;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      try {\n        return canvas.toDataURL(\"image/jpeg\");\n      } catch (e) {\n        console.error(\"Failed to get image data:\", e);\n        // Fall back to the original src if we can't get the data URL\n        return img.src;\n      }\n    }\n\n    const originalSrc = img.src;\n    let highQualityUrl = originalSrc;\n\n    if (currentSite === \"linkedin\") {\n      const isCertificationImage =\n        img.closest(\".feed-shared-celebration-image\") !== null;\n\n      if (isCertificationImage) {\n        return originalSrc;\n      }\n\n      try {\n        const parsedUrl = new URL(originalSrc);\n        const pathname = parsedUrl.pathname;\n\n        // Remove size parameters\n        parsedUrl.searchParams.delete(\"w\");\n        parsedUrl.searchParams.delete(\"h\");\n\n        // Set to highest quality\n        parsedUrl.searchParams.set(\"w\", \"1000\");\n        parsedUrl.searchParams.set(\"h\", \"1000\");\n\n        highQualityUrl = parsedUrl.toString();\n\n        // Preserve the original file extension if it exists\n        const originalExtension = pathname.split(\".\").pop().toLowerCase();\n        if ([\"jpg\", \"jpeg\", \"png\", \"gif\", \"webp\"].includes(originalExtension)) {\n          if (!highQualityUrl.toLowerCase().endsWith(`.${originalExtension}`)) {\n            highQualityUrl += `.${originalExtension}`;\n          }\n        }\n      } catch (error) {\n        console.error(\"Failed to parse LinkedIn image URL:\", error);\n        highQualityUrl = originalSrc;\n      }\n    } else if (currentSite === \"instagram\") {\n      if (originalSrc.includes(\"&_nc_ht=\")) {\n        try {\n          const url = new URL(originalSrc);\n          url.searchParams.delete(\"_nc_sid\");\n          url.searchParams.delete(\"_nc_ohc\");\n          url.searchParams.delete(\"_nc_ht\");\n          url.searchParams.delete(\"edm\");\n          url.searchParams.delete(\"oh\");\n          url.searchParams.delete(\"oe\");\n          highQualityUrl = url.toString();\n        } catch (error) {\n          console.error(\"Failed to parse Instagram image URL:\", error);\n        }\n      }\n    }\n\n    return highQualityUrl;\n  }\n\n  // Show message to user\n  function showMessage(message, type) {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.textContent = message;\n    messageDiv.style.position = \"fixed\";\n    messageDiv.style.bottom = \"20px\";\n    messageDiv.style.right = \"20px\";\n    messageDiv.style.padding = \"10px 20px\";\n    messageDiv.style.borderRadius = \"5px\";\n    messageDiv.style.color = \"#fff\";\n    messageDiv.style.zIndex = \"10000\";\n    messageDiv.style.boxShadow = \"0 2px 8px rgba(0, 0, 0, 0.2)\";\n    messageDiv.style.opacity = \"0\";\n    messageDiv.style.transition = \"opacity 0.5s ease-in-out\";\n\n    if (type === \"success\") {\n      messageDiv.style.backgroundColor = \"#4caf50\";\n    } else if (type === \"error\") {\n      messageDiv.style.backgroundColor = \"#f44336\";\n    } else {\n      messageDiv.style.backgroundColor = \"#333\";\n    }\n\n    document.body.appendChild(messageDiv);\n\n    void messageDiv.offsetWidth;\n\n    messageDiv.style.opacity = \"1\";\n\n    setTimeout(() => {\n      messageDiv.style.opacity = \"0\";\n      messageDiv.addEventListener(\"transitionend\", () => {\n        messageDiv.remove();\n      });\n    }, 3000);\n  }\n\n  // Debounced version of addOrUpdateOverlayToImages\n  const debouncedAddOrUpdateOverlayToImages = debounce(\n    addOrUpdateOverlayToImages,\n    500\n  );\n\n  // Handle DOM changes\n  function handleDOMChanges(mutationsList) {\n    for (const mutation of mutationsList) {\n      if (mutation.type === \"childList\" || mutation.type === \"attributes\") {\n        if (\n          mutation.addedNodes.length > 0 ||\n          (mutation.type === \"attributes\" && mutation.attributeName === \"src\")\n        ) {\n          clearTimeout(debounceTimer);\n          debounceTimer = setTimeout(() => {\n            addOrUpdateOverlayToImages();\n          }, DEBOUNCE_DELAY);\n          break;\n        }\n      }\n    }\n  }\n\n  // Set up observers for DOM changes\n  function setupObservers() {\n    bodyObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const images = node.querySelectorAll(\n                \"img:not([data-overlay-processed])\"\n              );\n              images.forEach((img, index) => processImage(img, index));\n            }\n          });\n        }\n      });\n    });\n\n    bodyObserver.observe(document.body, { childList: true, subtree: true });\n\n    setInterval(checkForNewImages, 2000);\n\n    window.addEventListener(\n      \"scroll\",\n      debounce(() => {\n        addOrUpdateOverlayToImages();\n      }, 200)\n    );\n\n    observer = new MutationObserver(handleDOMChanges);\n    observer.observe(document.body, { childList: true, subtree: true });\n  }\n\n  // Disconnect observers\n  function disconnectObservers() {\n    if (bodyObserver) {\n      bodyObserver.disconnect();\n    }\n    if (observer) {\n      observer.disconnect();\n    }\n\n    window.removeEventListener(\"scroll\", debouncedAddOrUpdateOverlayToImages);\n  }\n\n  // Check for new images periodically\n  function checkForNewImages() {\n    const images = document.querySelectorAll(\n      \"img:not([data-overlay-processed])\"\n    );\n    images.forEach((img, index) => processImage(img, index));\n  }\n\n  // Watch for changes in certification images\n  function watchCertificationImage(container) {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          const addedNodes = Array.from(mutation.addedNodes);\n          const removedNodes = Array.from(mutation.removedNodes);\n\n          const addedImage = addedNodes.find((node) => node.tagName === \"IMG\");\n          const removedImage = removedNodes.find(\n            (node) => node.tagName === \"IMG\"\n          );\n\n          if (addedImage) {\n            processImage(addedImage, \"certification\");\n          }\n\n          if (removedImage) {\n            const overlay = container.querySelector(\".image-overlay\");\n            if (overlay) {\n              overlay.remove();\n            }\n          }\n        }\n      });\n    });\n\n    observer.observe(container, { childList: true, subtree: true });\n  }\n\n  // Check if the extension is still valid\n  function checkExtensionValidity() {\n    if (!chrome.runtime.id) {\n      location.reload();\n    }\n  }\n\n  setInterval(checkExtensionValidity, 60000);\n\n  // Initialize overlay\n  async function initializeOverlay() {\n    const shouldProcess = await shouldProcessImage();\n    if (shouldProcess) {\n      addOrUpdateOverlayToImages();\n    }\n  }\n\n  // Set up the extension\n  async function setupExtension() {\n    if (!chrome.runtime || !chrome.runtime.id) {\n      return;\n    }\n\n    const hostname = window.location.hostname;\n    if (hostname.includes(\"linkedin.com\")) currentSite = \"linkedin\";\n    else if (hostname.includes(\"facebook.com\")) currentSite = \"facebook\";\n    else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\"))\n      currentSite = \"twitter\";\n    else if (hostname.includes(\"instagram.com\")) currentSite = \"instagram\";\n    else if (hostname.includes(\"reddit.com\")) currentSite = \"reddit\";\n    else currentSite = null;\n\n    if (currentSite) {\n      const shouldProcess = await shouldProcessImage();\n      if (shouldProcess) {\n        extensionEnabled = true;\n        siteEnabled = true;\n        initializeOverlay();\n        setupObservers();\n      } else {\n        disableExtension();\n      }\n    }\n  }\n\n  // Disable the extension\n  function disableExtension() {\n    extensionEnabled = false;\n    siteEnabled = false;\n    removeAllOverlays();\n    disconnectObservers();\n  }\n\n  // Handle settings updates\n  function handleSettingsUpdate(settings) {\n    extensionEnabled = settings.enableOverlay !== false;\n    siteEnabled = settings[currentSite] !== false;\n\n    if (!extensionEnabled || !siteEnabled) {\n      hideAllOverlays();\n    } else {\n      showAllOverlays();\n      addOrUpdateOverlayToImages();\n    }\n  }\n\n  // Hide all overlays\n  function hideAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => {\n      overlay.style.display = \"none\";\n    });\n  }\n\n  // Show all overlays\n  function showAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => {\n      overlay.style.display = \"flex\";\n    });\n  }\n\n  // Message listener for chrome runtime messages\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"settingsChanged\") {\n      // Update your content script's behavior based on the new settings\n      // For example:\n      updateSettings(request.changes);\n      sendResponse({ success: true });\n    }\n    if (request.action === \"updateSettings\") {\n      handleSettingsUpdate(request.settings);\n      sendResponse({ status: \"Settings updated\" });\n    }\n    return true; // Indicates that the response is sent asynchronously\n  });\n\n  function updateSettings(changes) {\n    // Implement this function to update your content script's behavior\n    // based on the changed settings\n    // Example:\n    if (changes.enableOverlay) {\n      extensionEnabled = changes.enableOverlay.newValue;\n    }\n    // Update other settings as needed\n    setupExtension(); // Re-run your setup function with the new settings\n  }\n\n  // Initialize the extension\n  setupExtension();\n\n  // Add CSS rules\n  const cssRules = ``;\n\n  const style = document.createElement(\"style\");\n  style.innerHTML = cssRules;\n  document.head.appendChild(style);\n\n  // Create image overlay\n  function createImageOverlay(imageElement) {\n    let wrapper = imageElement.closest(\".image-wrapper\");\n    if (!wrapper) {\n      wrapper = document.createElement(\"div\");\n      wrapper.className = \"image-wrapper\";\n      imageElement.parentNode.insertBefore(wrapper, imageElement);\n      wrapper.appendChild(imageElement);\n    }\n\n    const overlay = document.createElement(\"div\");\n    overlay.className = \"image-overlay\";\n    overlay.setAttribute(\"data-for-image\", imageElement.src); // Store the image URL\n    wrapper.appendChild(overlay);\n\n    // Add click handler for the overlay\n    overlay.addEventListener(\n      \"click\",\n      (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        showConsentPopup(overlay, imageElement.src);\n      },\n      true\n    );\n\n    return overlay;\n  }\n\n  // Add overlay to image\n  function addOverlay(imageElement, index) {\n    if (imageElement.getAttribute(\"aria-hidden\") === \"true\") {\n      imageElement.removeAttribute(\"aria-hidden\");\n    }\n\n    createImageOverlay(imageElement);\n  }\n\n  // Debounce timer and delay\n  let debounceTimer;\n  const DEBOUNCE_DELAY = 300;\n\n  // Log errors\n  function logError(error) {\n    // Additional logging mechanisms can be added here\n  }\n\n  // Global error event listener\n  window.addEventListener(\"error\", (event) => {\n    logError(event.error);\n  });\n\n  const getValidOrigin = () => {\n    const currentOrigin = window.location.origin;\n    if (allowedOrigins.includes(currentOrigin)) {\n      return currentOrigin;\n    }\n    return null;\n  };\n\n  // In the displayAnalysisResults function, update how we generate the detail rows\n  // Move the title attribute from detail-row to detail-label\n  const detailRow = (label, value, tooltip) => `\n    <div class=\"detail-row\">\n        <span class=\"detail-label\" title=\"${tooltip}\">${label}</span>\n        <span class=\"detail-value\">${value}</span>\n    </div>\n  `;\n})();\n"],"names":["debounce","func","wait","timeout","args","clearTimeout","setTimeout","decodeJWT","token","base64","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","decoded","JSON","parse","console","log","username","error","bodyObserver","observer","extensionEnabled","siteEnabled","currentSite","removeAllOverlays","document","querySelectorAll","forEach","overlay","remove","async","shouldProcessImage","items","Promise","resolve","reject","chrome","storage","sync","get","runtime","lastError","enableOverlay","addOrUpdateOverlayToImages","allImages","traverse","node","nodeType","Node","ELEMENT_NODE","tagName","toLowerCase","dataset","overlayProcessed","push","shadowRoot","childNodes","child","body","img","index","width","height","getAttribute","classList","contains","complete","naturalWidth","processImage","addEventListener","once","IntersectionObserver","entries","entry","isIntersecting","addOrUpdateOverlayToImage","unobserve","threshold","observe","onerror","onload","uniqueId","Date","now","querySelector","src","createElement","className","forImage","overlayId","iconImg","getURL","style","cssText","appendChild","onclick","e","stopPropagation","preventDefault","existingPopup","highestQualityUrl","canvas","naturalHeight","getContext","drawImage","toDataURL","originalSrc","highQualityUrl","closest","parsedUrl","URL","pathname","searchParams","delete","set","originalExtension","pop","includes","endsWith","url","getHighestQualityImageUrl","target","imageUrl","popup","setAttribute","innerHTML","display","updatePopupPosition","overlayRect","getBoundingClientRect","scrollY","window","pageYOffset","left","right","top","offsetWidth","innerWidth","maxTop","documentElement","scrollHeight","offsetHeight","Math","max","min","position","debouncedUpdate","storeDataCheckbox","storeData","checked","filename","mimeType","local","result","authToken","displayAnalysisResults","decodedToken","userId","format","jpg","jpeg","png","gif","webp","getMimeType","fetch","then","response","ok","Error","status","arrayBuffer","uint8Array","Uint8Array","crypto","subtle","digest","hashBuffer","hashHex","Array","from","b","padStart","sendMessage","action","imageData","size","length","sha256Hash","origin","location","message","catch","sendImageForAnalysis","removeEventListener","disconnect","showConsentPopup","messageDiv","textContent","bottom","padding","borderRadius","color","zIndex","boxShadow","opacity","transition","backgroundColor","showMessage","parentElement","updateOverlayPosition","rect","viewportHeight","innerHeight","viewportWidth","isPartiallyVisible","isSlideshow","isVideo","offsetParent","overlayEventListenersAdded","scrollHandler","resizeHandler","passive","MutationObserver","mutations","mutation","type","attributeName","attributes","attributeFilter","results","standardAnalysis","sageMakerAnalysis","ufdAnalysis","sageMakerAnalysisUFD","analysis","probability","toFixed","confidenceColor","titleText","requestCount","detailRow","originalFileName","fileSize","metadata","sharp","toUpperCase","space","channels","depth","density","chromaSubsampling","isProgressive","hasAlpha","hasProfile","imageHash","pHash","uploadDate","toLocaleString","originWebsites","head","feedbackBtns","feedbackComment","submitBtn","textarea","charCounter","btn","add","value","disabled","selectedFeedback","find","comment","trim","feedbackType","feedbackData","success","feedbackSection","marginTop","alreadySubmitted","errorMsg","parentNode","insertBefore","nextSibling","accordionButton","accordionContent","isOpen","closeX","debouncedAddOrUpdateOverlayToImages","handleDOMChanges","mutationsList","addedNodes","debounceTimer","DEBOUNCE_DELAY","checkForNewImages","setupExtension","id","hostname","initializeOverlay","childList","subtree","setInterval","reload","onMessage","addListener","request","sender","sendResponse","changes","newValue","settings","event","label","tooltip"],"sourceRoot":""}