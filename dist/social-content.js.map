{"version":3,"file":"social-content.js","mappings":"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","sources":["webpack://chrome-gmail-poc/./src/social-content.js"],"sourcesContent":["(() => {\n  // At the top of the file, add:\n  console.log(\"Social content script loaded\");\n\n  // Utility function to debounce frequent function calls\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Global variables\n  let extensionEnabled = false;\n  let siteEnabled = false;\n  let currentSite = null;\n\n  let retryCount = 0;\n  const MAX_RETRIES = 5;\n  const INITIAL_RETRY_DELAY = 1000; // 1 second\n\n  let bodyObserver;\n  let observer;\n\n  // Remove all overlay elements from the page\n  function removeAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => overlay.remove());\n  }\n\n  // Check if image processing should occur based on user settings\n  async function shouldProcessImage() {\n    try {\n      const items = await new Promise((resolve, reject) => {\n        chrome.storage.sync.get(\n          [\n            \"enableOverlay\",\n            \"facebook\",\n            \"twitter\",\n            \"instagram\",\n            \"linkedin\",\n            \"reddit\",\n          ],\n          (items) => {\n            if (chrome.runtime.lastError) {\n              reject(chrome.runtime.lastError);\n            } else {\n              resolve(items);\n            }\n          }\n        );\n      });\n\n      extensionEnabled = items.enableOverlay !== false;\n      siteEnabled = items[currentSite] !== false;\n\n      return extensionEnabled && siteEnabled;\n    } catch (error) {\n      console.error(\"Error in shouldProcessImage:\", error);\n      return false;\n    }\n  }\n\n  // Main function to add or update overlays on images\n  async function addOrUpdateOverlayToImages() {\n    const shouldProcess = await shouldProcessImage();\n    if (!shouldProcess) {\n      removeAllOverlays();\n      return;\n    }\n\n    const allImages = [];\n\n    // Recursive function to traverse DOM and shadow DOM\n    function traverse(node) {\n      if (node.nodeType !== Node.ELEMENT_NODE) return;\n      if (\n        node.tagName.toLowerCase() === \"img\" &&\n        !node.dataset.overlayProcessed\n      ) {\n        allImages.push(node);\n      }\n\n      if (node.shadowRoot) {\n        traverse(node.shadowRoot);\n      }\n\n      node.childNodes.forEach((child) => traverse(child));\n    }\n\n    traverse(document.body);\n\n    // Special handling for Instagram\n    if (currentSite === \"instagram\") {\n      const instagramImages = document.querySelectorAll(\n        'img[srcset], img[src*=\"instagram\"]'\n      );\n      instagramImages.forEach((img) => {\n        if (!img.dataset.overlayProcessed) {\n          allImages.push(img);\n        }\n      });\n    }\n\n    // Special handling for Reddit\n    if (currentSite === \"reddit\") {\n      const redditImages = document.querySelectorAll('img[alt=\"Post image\"]');\n      redditImages.forEach((img) => allImages.push(img));\n    }\n\n    // Process each image\n    allImages.forEach((img, index) => {\n      if (\n        (img.width > 50 && img.height > 50) ||\n        (img.getAttribute(\"width\") > 50 && img.getAttribute(\"height\") > 50) ||\n        img.classList.contains(\"media-lightbox-img\")\n      ) {\n        try {\n          if (img.complete && img.naturalWidth > 0) {\n            processImage(img, index);\n          } else {\n            img.addEventListener(\n              \"load\",\n              () => {\n                processImage(img, index);\n              },\n              { once: true }\n            );\n          }\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n        }\n      } else {\n        img.dataset.overlayProcessed = \"skipped\";\n      }\n    });\n  }\n\n  // Process individual image\n  function processImage(img, index) {\n    if (img.dataset.overlayProcessed === \"true\") {\n      return;\n    }\n\n    // Use Intersection Observer to detect when image is in viewport\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            if (\n              (img.width > 100 && img.height > 100) ||\n              img.tagName.toLowerCase() === \"video\"\n            ) {\n              addOrUpdateOverlayToImage(img, index);\n            }\n            observer.unobserve(img);\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(img);\n\n    img.dataset.overlayProcessed = \"true\";\n\n    // Error handling for image loading\n    img.onerror = function () {\n      // Error handling logic here if needed\n    };\n\n    // Handle successful image load\n    img.onload = function () {\n      if (\n        (img.width > 100 && img.height > 100) ||\n        img.tagName.toLowerCase() === \"video\"\n      ) {\n        addOrUpdateOverlayToImage(img, index);\n      }\n    };\n  }\n\n  // Add or update overlay on an image\n  function addOrUpdateOverlayToImage(img, index) {\n    let overlay = document.querySelector(\n      `.image-overlay[data-for-image=\"${img.src}\"]`\n    );\n\n    if (!overlay) {\n      overlay = document.createElement(\"div\");\n      overlay.className = \"image-overlay\";\n      overlay.dataset.forImage = img.src;\n      overlay.style.cssText = `\n        position: absolute;\n        width: 30px;\n        height: 30px;\n        background-color: rgba(255, 255, 255, 0.4);\n        border-radius: 50%;\n        cursor: pointer;\n        z-index: 2147483647;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 20px;\n        pointer-events: auto;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n        opacity: 0.5;\n        transition: opacity 0.3s ease, background-color 0.3s ease, display 0.3s ease;\n      `;\n      overlay.textContent = \"🧿\";\n\n      overlay.onclick = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const highestQualityUrl = getHighestQualityImageUrl(img);\n\n        if (highestQualityUrl) {\n          showConsentPopup(overlay, highestQualityUrl);\n        } else {\n          showMessage(\"No suitable image found.\", \"error\");\n        }\n      };\n\n      img.parentElement.appendChild(overlay);\n\n      overlay.addEventListener(\"mouseenter\", () => {\n        overlay.style.opacity = \"1\";\n        overlay.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n      });\n\n      overlay.addEventListener(\"mouseleave\", () => {\n        overlay.style.opacity = \"0.5\";\n        overlay.style.backgroundColor = \"rgba(255, 255, 255, 0.4)\";\n      });\n    }\n\n    const updateOverlayPosition = debounce(() => {\n      const rect = img.getBoundingClientRect();\n      const viewportHeight = window.innerHeight;\n      const viewportWidth = window.innerWidth;\n\n      const isPartiallyVisible =\n        rect.top < viewportHeight &&\n        rect.bottom > 0 &&\n        rect.left < viewportWidth &&\n        rect.right > 0;\n\n      const isSlideshow = img.closest(\".media-lightbox-img\") !== null;\n      const isVideo =\n        img.tagName.toLowerCase() === \"video\" || img.querySelector(\"video\");\n\n      if (\n        isPartiallyVisible &&\n        ((rect.width > 100 && rect.height > 100) || isVideo) &&\n        (!isSlideshow || img.offsetParent !== null)\n      ) {\n        overlay.style.display = \"flex\";\n        const top = 10;\n        const right = 10;\n        overlay.style.top = `${top}px`;\n        overlay.style.right = `${right}px`;\n        overlay.style.bottom = \"auto\";\n        overlay.style.left = \"auto\";\n      } else if (isVideo) {\n        overlay.style.display = \"flex\";\n        overlay.style.top = \"10px\";\n        overlay.style.right = \"10px\";\n        overlay.style.bottom = \"auto\";\n        overlay.style.left = \"auto\";\n      } else {\n        setTimeout(() => {\n          if (!isPartiallyVisible) {\n            overlay.style.display = \"none\";\n          }\n        }, 300); // 300ms delay before hiding\n      }\n    }, 100); // 100ms debounce\n\n    updateOverlayPosition();\n\n    if (!img.dataset.overlayEventListenersAdded) {\n      const scrollHandler = () => {\n        updateOverlayPosition();\n      };\n      const resizeHandler = () => {\n        updateOverlayPosition();\n      };\n      window.addEventListener(\"scroll\", scrollHandler, { passive: true });\n      window.addEventListener(\"resize\", resizeHandler, { passive: true });\n      img.dataset.overlayEventListenersAdded = \"true\";\n    }\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === \"attributes\" &&\n          (mutation.attributeName === \"src\" ||\n            mutation.attributeName === \"style\")\n        ) {\n          overlay.dataset.forImage = img.src;\n          updateOverlayPosition();\n        }\n      });\n    });\n\n    observer.observe(img, {\n      attributes: true,\n      attributeFilter: [\"src\", \"style\"],\n    });\n  }\n\n  // Add this helper function for debugging\n  function debugLog(message, ...args) {\n    console.log(`[RealEyes Debug] ${message}`, ...args);\n  }\n\n  // Show consent popup before sending image for analysis\n  function showConsentPopup(target, imageUrl) {\n    debugLog(\"Showing consent popup for target:\", target);\n\n    // Check if there's already a popup for this image\n    const existingPopup = document.querySelector(\n      `.consent-popup[data-for-image=\"${imageUrl}\"]`\n    );\n    if (existingPopup) {\n      return existingPopup;\n    }\n\n    // Remove any other popups\n    const existingPopups = document.querySelectorAll(\n      \".consent-popup:not([data-for-image='\" + imageUrl + \"'])\"\n    );\n    existingPopups.forEach((popup) => popup.remove());\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"consent-popup\";\n    popup.setAttribute(\"data-for-image\", imageUrl);\n\n    // Add popup content\n    popup.innerHTML = `\n      <p class=\"consent-message\">Analyze this image?</p>\n      <div class=\"consent-buttons\">\n        <button class=\"confirm-btn\">Analyze Now</button>\n        <button class=\"cancel-btn\">Skip</button>\n      </div>\n      <div class=\"consent-options\">\n        <label class=\"store-data-option\">\n          <input type=\"checkbox\" class=\"store-data-checkbox\" id=\"storeImageData\" checked>\n          <span>Help us improve detection by storing this image</span>\n        </label>\n      </div>\n    `;\n\n    document.body.appendChild(popup);\n\n    // Create an Intersection Observer for the target (overlay icon)\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            // Show popup when target is visible\n            popup.style.display = \"flex\";\n            updatePopupPosition();\n          } else {\n            // Hide popup when target is not visible\n            popup.style.display = \"none\";\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(target);\n\n    // Position the popup relative to the icon overlay\n    const updatePopupPosition = () => {\n      if (popup.style.display === \"none\") return;\n\n      const overlayRect = target.getBoundingClientRect();\n      debugLog(\"Overlay rect:\", overlayRect);\n\n      // Calculate position relative to the overlay icon\n      let left = overlayRect.right + window.pageXOffset + 10;\n      let top = overlayRect.top + window.pageYOffset;\n\n      // If popup would go off-screen to the right, position it to the left\n      if (\n        left + popup.offsetWidth >\n        window.innerWidth - 10 + window.pageXOffset\n      ) {\n        left = overlayRect.left + window.pageXOffset - popup.offsetWidth - 10;\n      }\n\n      // Ensure popup stays within viewport bounds vertically\n      const maxTop =\n        window.innerHeight + window.pageYOffset - popup.offsetHeight - 10;\n      top = Math.max(10 + window.pageYOffset, Math.min(top, maxTop));\n\n      debugLog(\"Setting popup position:\", { left, top });\n\n      popup.style.position = \"absolute\";\n      popup.style.left = `${left}px`;\n      popup.style.top = `${top}px`;\n    };\n\n    // Initial positioning\n    setTimeout(updatePopupPosition, 0);\n\n    // Update position on window resize and scroll\n    const debouncedUpdate = debounce(updatePopupPosition, 100);\n    window.addEventListener(\"resize\", debouncedUpdate);\n    window.addEventListener(\"scroll\", debouncedUpdate);\n\n    // Enhanced cleanup function\n    const cleanup = () => {\n      debugLog(\"Cleaning up popup\");\n      window.removeEventListener(\"resize\", debouncedUpdate);\n      window.removeEventListener(\"scroll\", debouncedUpdate);\n      observer.disconnect();\n      popup.remove();\n    };\n\n    // Update the confirm button click handler\n    popup\n      .querySelector(\".confirm-btn\")\n      ?.addEventListener(\"click\", async (e) => {\n        e.preventDefault();\n\n        const storeDataCheckbox = popup.querySelector(\"#storeImageData\");\n        const storeData = storeDataCheckbox ? storeDataCheckbox.checked : false;\n\n        // Remove ALL existing content from popup\n        popup.innerHTML = '<div class=\"loading-indicator\">Analyzing...</div>';\n\n        // Send image for analysis using the existing popup\n        await sendImageForAnalysis(imageUrl, popup, storeData);\n      });\n\n    // Only add cleanup to cancel button\n    popup.querySelector(\".cancel-btn\")?.addEventListener(\"click\", cleanup);\n\n    return popup;\n  }\n\n  // Send image data for analysis\n  function sendImageForAnalysis(url, popup, storeData) {\n    let filename = url.split(\"/\").pop().split(\"?\")[0];\n    let mimeType = \"image/jpeg\"; // Default to JPEG for Twitter images\n\n    if (url.includes(\"twimg.com\")) {\n      // For Twitter images, extract format from URL\n      const format = new URL(url).searchParams.get(\"format\");\n      if (format) {\n        filename += `.${format}`;\n        mimeType = `image/${format}`;\n      }\n    } else {\n      mimeType = getMimeType(filename);\n    }\n\n    console.log(`Sending image for analysis: ${filename}`);\n    console.log(`MIME type: ${mimeType}`);\n    console.log(`Image URL: ${url}`);\n    console.log(`Store image data: ${storeData}`);\n\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.arrayBuffer();\n      })\n      .then((arrayBuffer) => {\n        const uint8Array = new Uint8Array(arrayBuffer);\n        return crypto.subtle\n          .digest(\"SHA-256\", uint8Array)\n          .then((hashBuffer) => {\n            const hashArray = Array.from(new Uint8Array(hashBuffer));\n            const hashHex = hashArray\n              .map((b) => b.toString(16).padStart(2, \"0\"))\n              .join(\"\");\n            return { uint8Array, hashHex };\n          });\n      })\n      .then(({ uint8Array, hashHex }) => {\n        chrome.runtime.sendMessage(\n          {\n            action: \"sendImage\",\n            imageData: {\n              url,\n              mimeType,\n              filename,\n              size: uint8Array.length,\n              sha256Hash: hashHex,\n              origin: window.location.origin,\n              storeData: storeData, // Add the storage consent flag\n            },\n          },\n          (response) => {\n            if (chrome.runtime.lastError) {\n              console.error(\"Error sending message:\", chrome.runtime.lastError);\n              displayAnalysisResults(\n                popup,\n                \"Error: \" + chrome.runtime.lastError.message,\n                \"error\"\n              );\n            } else if (response.error === \"Authentication required\") {\n              displayAnalysisResults(\n                popup,\n                \"Authentication required. Please log in and try again.\",\n                \"error\"\n              );\n            } else {\n              console.log(\"Server response:\", response);\n              displayAnalysisResults(popup, response, \"success\");\n            }\n          }\n        );\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        displayAnalysisResults(popup, \"Error: \" + error.message, \"error\");\n      });\n  }\n\n  // Simplify displayAnalysisResults since UI cleanup is handled earlier\n  function displayAnalysisResults(popup, results, status) {\n    // Clear any existing content\n    popup.innerHTML = \"\";\n\n    if (status === \"error\") {\n      popup.innerHTML = `\n        <div class=\"error-container\">\n          <p class=\"error\">${results}</p>\n          <button class=\"close-btn\">Close</button>\n        </div>\n      `;\n    } else {\n      const analysis = results.sageMakerAnalysis;\n      console.log(\"Analysis results:\", analysis);\n\n      if (analysis) {\n        const probability = (analysis.probability * 100).toFixed(1);\n        const isFake = analysis.isFake;\n\n        // Determine color based on probability\n        let confidenceColor;\n        if (probability < 33) {\n          confidenceColor = \"#28a745\";\n        } else if (probability < 66) {\n          confidenceColor = \"#ffc107\";\n        } else {\n          confidenceColor = \"#dc3545\";\n        }\n\n        popup.innerHTML = `\n            <div class=\"probability-circle\">\n              <svg width=\"150\" height=\"150\" viewBox=\"0 0 150 150\">\n                <circle\n                  cx=\"75\"\n                  cy=\"75\"\n                  r=\"70\"\n                  stroke=\"#E6E6E6\"\n                  stroke-width=\"10\"\n                  fill=\"none\"\n                />\n                <circle\n                  cx=\"75\"\n                  cy=\"75\"\n                  r=\"70\"\n                  stroke=\"${confidenceColor}\"\n                  stroke-width=\"10\"\n                  fill=\"none\"\n                  stroke-linecap=\"round\"\n                  stroke-dasharray=\"439.82\"\n                  stroke-dashoffset=\"${439.82 * (1 - probability / 100)}\"\n                  transform=\"rotate(-90 75 75)\"\n                  style=\"transition: stroke-dashoffset 1s\"\n                />\n              </svg>\n              <div class=\"probability-text\">\n                <div class=\"probability-value\" style=\"color: ${confidenceColor}\">${probability}%</div>\n                <div class=\"probability-label\">Deepfake Probability</div>\n              </div>\n            </div>\n\n            <div class=\"confidence-indicators\">\n              <div class=\"indicator real\">\n                <div class=\"indicator-dot\"></div>\n                <div class=\"indicator-label\">Likely Real</div>\n              </div>\n              <div class=\"indicator uncertain\">\n                <div class=\"indicator-dot\"></div>\n                <div class=\"indicator-label\">Uncertain</div>\n              </div>\n              <div class=\"indicator fake\">\n                <div class=\"indicator-dot\"></div>\n                <div class=\"indicator-label\">Likely Deepfake</div>\n              </div>\n            </div>\n\n            <div style=\"\n              width: 100%;\n              text-align: center; \n              margin-top: 20px;\n            \">\n              <button class=\"close-btn\">Close</button>\n            </div>\n          </div>\n        `;\n      } else {\n        popup.innerHTML = `\n          <div class=\"error-container\">\n            <p class=\"error\">No analysis results available</p>\n            <button class=\"close-btn\">Close</button>\n          </div>\n        `;\n      }\n    }\n\n    // Add click handler for the close button\n    const closeBtn = popup.querySelector(\".close-btn\");\n    if (closeBtn) {\n      closeBtn.addEventListener(\"click\", () => {\n        popup.remove();\n      });\n    }\n  }\n\n  // Helper function to get MIME type from filename\n  function getMimeType(filename) {\n    const ext = filename.split(\".\").pop().toLowerCase();\n    const mimeTypes = {\n      jpg: \"image/jpeg\",\n      jpeg: \"image/jpeg\",\n      png: \"image/png\",\n      gif: \"image/gif\",\n      webp: \"image/webp\",\n    };\n    return mimeTypes[ext] || \"application/octet-stream\";\n  }\n\n  // Get the highest quality image URL\n  function getHighestQualityImageUrl(img) {\n    if (currentSite === \"instagram\") {\n      // Try to get the image data from the loaded image\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.naturalWidth;\n      canvas.height = img.naturalHeight;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      try {\n        return canvas.toDataURL(\"image/jpeg\");\n      } catch (e) {\n        console.error(\"Failed to get image data:\", e);\n        // Fall back to the original src if we can't get the data URL\n        return img.src;\n      }\n    }\n\n    const originalSrc = img.src;\n    let highQualityUrl = originalSrc;\n\n    if (currentSite === \"linkedin\") {\n      const isCertificationImage =\n        img.closest(\".feed-shared-celebration-image\") !== null;\n\n      if (isCertificationImage) {\n        return originalSrc;\n      }\n\n      try {\n        const parsedUrl = new URL(originalSrc);\n        const pathname = parsedUrl.pathname;\n\n        // Remove size parameters\n        parsedUrl.searchParams.delete(\"w\");\n        parsedUrl.searchParams.delete(\"h\");\n\n        // Set to highest quality\n        parsedUrl.searchParams.set(\"w\", \"1000\");\n        parsedUrl.searchParams.set(\"h\", \"1000\");\n\n        highQualityUrl = parsedUrl.toString();\n\n        // Preserve the original file extension if it exists\n        const originalExtension = pathname.split(\".\").pop().toLowerCase();\n        if ([\"jpg\", \"jpeg\", \"png\", \"gif\", \"webp\"].includes(originalExtension)) {\n          if (!highQualityUrl.toLowerCase().endsWith(`.${originalExtension}`)) {\n            highQualityUrl += `.${originalExtension}`;\n          }\n        }\n      } catch (error) {\n        console.error(\"Failed to parse LinkedIn image URL:\", error);\n        highQualityUrl = originalSrc;\n      }\n    } else if (currentSite === \"instagram\") {\n      if (originalSrc.includes(\"&_nc_ht=\")) {\n        try {\n          const url = new URL(originalSrc);\n          url.searchParams.delete(\"_nc_sid\");\n          url.searchParams.delete(\"_nc_ohc\");\n          url.searchParams.delete(\"_nc_ht\");\n          url.searchParams.delete(\"edm\");\n          url.searchParams.delete(\"oh\");\n          url.searchParams.delete(\"oe\");\n          highQualityUrl = url.toString();\n        } catch (error) {\n          console.error(\"Failed to parse Instagram image URL:\", error);\n        }\n      }\n    }\n\n    return highQualityUrl;\n  }\n\n  // Show message to user\n  function showMessage(message, type) {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.textContent = message;\n    messageDiv.style.position = \"fixed\";\n    messageDiv.style.bottom = \"20px\";\n    messageDiv.style.right = \"20px\";\n    messageDiv.style.padding = \"10px 20px\";\n    messageDiv.style.borderRadius = \"5px\";\n    messageDiv.style.color = \"#fff\";\n    messageDiv.style.zIndex = \"10000\";\n    messageDiv.style.boxShadow = \"0 2px 8px rgba(0, 0, 0, 0.2)\";\n    messageDiv.style.opacity = \"0\";\n    messageDiv.style.transition = \"opacity 0.5s ease-in-out\";\n\n    if (type === \"success\") {\n      messageDiv.style.backgroundColor = \"#4caf50\";\n    } else if (type === \"error\") {\n      messageDiv.style.backgroundColor = \"#f44336\";\n    } else {\n      messageDiv.style.backgroundColor = \"#333\";\n    }\n\n    document.body.appendChild(messageDiv);\n\n    void messageDiv.offsetWidth;\n\n    messageDiv.style.opacity = \"1\";\n\n    setTimeout(() => {\n      messageDiv.style.opacity = \"0\";\n      messageDiv.addEventListener(\"transitionend\", () => {\n        messageDiv.remove();\n      });\n    }, 3000);\n  }\n\n  // Debounced version of addOrUpdateOverlayToImages\n  const debouncedAddOrUpdateOverlayToImages = debounce(\n    addOrUpdateOverlayToImages,\n    500\n  );\n\n  // Handle DOM changes\n  function handleDOMChanges(mutationsList) {\n    for (const mutation of mutationsList) {\n      if (mutation.type === \"childList\" || mutation.type === \"attributes\") {\n        if (\n          mutation.addedNodes.length > 0 ||\n          (mutation.type === \"attributes\" && mutation.attributeName === \"src\")\n        ) {\n          clearTimeout(debounceTimer);\n          debounceTimer = setTimeout(() => {\n            addOrUpdateOverlayToImages();\n          }, DEBOUNCE_DELAY);\n          break;\n        }\n      }\n    }\n  }\n\n  // Set up observers for DOM changes\n  function setupObservers() {\n    bodyObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const images = node.querySelectorAll(\n                \"img:not([data-overlay-processed])\"\n              );\n              images.forEach((img, index) => processImage(img, index));\n            }\n          });\n        }\n      });\n    });\n\n    bodyObserver.observe(document.body, { childList: true, subtree: true });\n\n    setInterval(checkForNewImages, 2000);\n\n    window.addEventListener(\n      \"scroll\",\n      debounce(() => {\n        addOrUpdateOverlayToImages();\n      }, 200)\n    );\n\n    observer = new MutationObserver(handleDOMChanges);\n    observer.observe(document.body, { childList: true, subtree: true });\n  }\n\n  // Disconnect observers\n  function disconnectObservers() {\n    if (bodyObserver) {\n      bodyObserver.disconnect();\n    }\n    if (observer) {\n      observer.disconnect();\n    }\n\n    window.removeEventListener(\"scroll\", debouncedAddOrUpdateOverlayToImages);\n  }\n\n  // Check for new images periodically\n  function checkForNewImages() {\n    const images = document.querySelectorAll(\n      \"img:not([data-overlay-processed])\"\n    );\n    images.forEach((img, index) => processImage(img, index));\n  }\n\n  // Watch for changes in certification images\n  function watchCertificationImage(container) {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          const addedNodes = Array.from(mutation.addedNodes);\n          const removedNodes = Array.from(mutation.removedNodes);\n\n          const addedImage = addedNodes.find((node) => node.tagName === \"IMG\");\n          const removedImage = removedNodes.find(\n            (node) => node.tagName === \"IMG\"\n          );\n\n          if (addedImage) {\n            processImage(addedImage, \"certification\");\n          }\n\n          if (removedImage) {\n            const overlay = container.querySelector(\".image-overlay\");\n            if (overlay) {\n              overlay.remove();\n            }\n          }\n        }\n      });\n    });\n\n    observer.observe(container, { childList: true, subtree: true });\n  }\n\n  // Check if the extension is still valid\n  function checkExtensionValidity() {\n    if (!chrome.runtime.id) {\n      location.reload();\n    }\n  }\n\n  setInterval(checkExtensionValidity, 60000);\n\n  // Initialize overlay\n  async function initializeOverlay() {\n    const shouldProcess = await shouldProcessImage();\n    if (shouldProcess) {\n      addOrUpdateOverlayToImages();\n    }\n  }\n\n  // Set up the extension\n  async function setupExtension() {\n    if (!chrome.runtime || !chrome.runtime.id) {\n      return;\n    }\n\n    const hostname = window.location.hostname;\n    if (hostname.includes(\"linkedin.com\")) currentSite = \"linkedin\";\n    else if (hostname.includes(\"facebook.com\")) currentSite = \"facebook\";\n    else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\"))\n      currentSite = \"twitter\";\n    else if (hostname.includes(\"instagram.com\")) currentSite = \"instagram\";\n    else if (hostname.includes(\"reddit.com\")) currentSite = \"reddit\";\n    else currentSite = null;\n\n    if (currentSite) {\n      const shouldProcess = await shouldProcessImage();\n      if (shouldProcess) {\n        extensionEnabled = true;\n        siteEnabled = true;\n        initializeOverlay();\n        setupObservers();\n      } else {\n        disableExtension();\n      }\n    }\n  }\n\n  // Disable the extension\n  function disableExtension() {\n    extensionEnabled = false;\n    siteEnabled = false;\n    removeAllOverlays();\n    disconnectObservers();\n  }\n\n  // Handle settings updates\n  function handleSettingsUpdate(settings) {\n    extensionEnabled = settings.enableOverlay !== false;\n    siteEnabled = settings[currentSite] !== false;\n\n    if (!extensionEnabled || !siteEnabled) {\n      hideAllOverlays();\n    } else {\n      showAllOverlays();\n      addOrUpdateOverlayToImages();\n    }\n  }\n\n  // Hide all overlays\n  function hideAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => {\n      overlay.style.display = \"none\";\n    });\n  }\n\n  // Show all overlays\n  function showAllOverlays() {\n    const overlays = document.querySelectorAll(\".image-overlay\");\n    overlays.forEach((overlay) => {\n      overlay.style.display = \"flex\";\n    });\n  }\n\n  // Message listener for chrome runtime messages\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log(\"Message received in social content script:\", request);\n    if (request.action === \"settingsChanged\") {\n      console.log(\"Settings changed:\", request.changes);\n      // Update your content script's behavior based on the new settings\n      // For example:\n      updateSettings(request.changes);\n      sendResponse({ success: true });\n    }\n    if (request.action === \"updateSettings\") {\n      handleSettingsUpdate(request.settings);\n      sendResponse({ status: \"Settings updated\" });\n    }\n    return true; // Indicates that the response is sent asynchronously\n  });\n\n  function updateSettings(changes) {\n    // Implement this function to update your content script's behavior\n    // based on the changed settings\n    console.log(\"Updating settings in content script:\", changes);\n    // Example:\n    if (changes.enableOverlay) {\n      extensionEnabled = changes.enableOverlay.newValue;\n    }\n    // Update other settings as needed\n    setupExtension(); // Re-run your setup function with the new settings\n  }\n\n  // Initialize the extension\n  setupExtension();\n\n  // Add CSS rules\n  const cssRules = `\n    .overlay:state(secondary-text-color) {\n      color: var(--secondary-text-color);\n    }\n    \n    .image-fill:state(webkit-fill-available) {\n      width: -webkit-fill-available;\n    }\n  `;\n\n  const style = document.createElement(\"style\");\n  style.innerHTML = cssRules;\n  document.head.appendChild(style);\n\n  // Create image overlay\n  function createImageOverlay(imageElement) {\n    debugLog(\"Creating overlay for image:\", imageElement);\n\n    let wrapper = imageElement.closest(\".image-wrapper\");\n    if (!wrapper) {\n      wrapper = document.createElement(\"div\");\n      wrapper.className = \"image-wrapper\";\n      imageElement.parentNode.insertBefore(wrapper, imageElement);\n      wrapper.appendChild(imageElement);\n    }\n\n    const overlay = document.createElement(\"div\");\n    overlay.className = \"image-overlay\";\n    overlay.setAttribute(\"data-for-image\", imageElement.src); // Store the image URL\n    wrapper.appendChild(overlay);\n\n    // Add click handler for the overlay\n    overlay.addEventListener(\n      \"click\",\n      (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        debugLog(\"Overlay clicked, showing popup\");\n        showConsentPopup(overlay, imageElement.src);\n      },\n      true\n    );\n\n    return overlay;\n  }\n\n  // Add overlay to image\n  function addOverlay(imageElement, index) {\n    if (imageElement.getAttribute(\"aria-hidden\") === \"true\") {\n      imageElement.removeAttribute(\"aria-hidden\");\n    }\n\n    createImageOverlay(imageElement);\n  }\n\n  // Debounce timer and delay\n  let debounceTimer;\n  const DEBOUNCE_DELAY = 300;\n\n  // Log errors\n  function logError(error) {\n    console.error(\"RealEyes.ai Extension Error:\", error);\n    // Additional logging mechanisms can be added here\n  }\n\n  // Global error event listener\n  window.addEventListener(\"error\", (event) => {\n    logError(event.error);\n  });\n\n  const getValidOrigin = () => {\n    const currentOrigin = window.location.origin;\n    if (allowedOrigins.includes(currentOrigin)) {\n      return currentOrigin;\n    }\n    return null;\n  };\n})();\n"],"names":["debounce","func","wait","timeout","args","clearTimeout","setTimeout","console","log","bodyObserver","observer","extensionEnabled","siteEnabled","currentSite","removeAllOverlays","document","querySelectorAll","forEach","overlay","remove","async","shouldProcessImage","items","Promise","resolve","reject","chrome","storage","sync","get","runtime","lastError","enableOverlay","error","addOrUpdateOverlayToImages","allImages","traverse","node","nodeType","Node","ELEMENT_NODE","tagName","toLowerCase","dataset","overlayProcessed","push","shadowRoot","childNodes","child","body","img","index","width","height","getAttribute","classList","contains","complete","naturalWidth","processImage","addEventListener","once","IntersectionObserver","entries","entry","isIntersecting","addOrUpdateOverlayToImage","unobserve","threshold","observe","onerror","onload","querySelector","src","createElement","className","forImage","style","cssText","textContent","onclick","e","stopPropagation","preventDefault","highestQualityUrl","canvas","naturalHeight","getContext","drawImage","toDataURL","originalSrc","highQualityUrl","closest","parsedUrl","URL","pathname","searchParams","delete","set","toString","originalExtension","split","pop","includes","endsWith","url","getHighestQualityImageUrl","target","imageUrl","debugLog","existingPopup","popup","setAttribute","innerHTML","appendChild","display","updatePopupPosition","overlayRect","getBoundingClientRect","left","right","window","pageXOffset","top","pageYOffset","offsetWidth","innerWidth","maxTop","innerHeight","offsetHeight","Math","max","min","position","debouncedUpdate","storeDataCheckbox","storeData","checked","filename","mimeType","format","jpg","jpeg","png","gif","webp","getMimeType","fetch","then","response","ok","Error","status","arrayBuffer","uint8Array","Uint8Array","crypto","subtle","digest","hashBuffer","hashHex","Array","from","map","b","padStart","join","sendMessage","action","imageData","size","length","sha256Hash","origin","location","displayAnalysisResults","message","catch","sendImageForAnalysis","removeEventListener","disconnect","showConsentPopup","messageDiv","bottom","padding","borderRadius","color","zIndex","boxShadow","opacity","transition","backgroundColor","showMessage","parentElement","updateOverlayPosition","rect","viewportHeight","viewportWidth","isPartiallyVisible","isSlideshow","isVideo","offsetParent","overlayEventListenersAdded","scrollHandler","resizeHandler","passive","MutationObserver","mutations","mutation","type","attributeName","attributes","attributeFilter","results","analysis","sageMakerAnalysis","probability","toFixed","confidenceColor","isFake","closeBtn","debouncedAddOrUpdateOverlayToImages","handleDOMChanges","mutationsList","addedNodes","debounceTimer","DEBOUNCE_DELAY","checkForNewImages","setupExtension","id","hostname","initializeOverlay","childList","subtree","setInterval","reload","onMessage","addListener","request","sender","sendResponse","changes","newValue","success","settings","head","event"],"sourceRoot":""}